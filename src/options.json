{
  "apex": {
    "title": "Apex",
    "type": "object",
    "description": "Options for language Apex",
    "collapsed": true,
    "beautifiers": [
      "Uncrustify"
    ],
    "grammars": [
      "Apex"
    ],
    "extensions": [
      "cls",
      "trigger"
    ],
    "properties": {
      "configPath": {
        "type": "string",
        "default": "",
        "description": "Path to uncrustify config file. i.e. uncrustify.cfg (Supported by Uncrustify)",
        "title": "Config Path",
        "beautifiers": [
          "Uncrustify"
        ],
        "key": "configPath",
        "language": {
          "name": "Apex",
          "namespace": "apex"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Apex Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Uncrustify",
        "description": "Default Beautifier to be used for Apex",
        "enum": [
          "Uncrustify"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Apex files on save"
      }
    }
  },
  "arduino": {
    "title": "Arduino",
    "type": "object",
    "description": "Options for language Arduino",
    "collapsed": true,
    "beautifiers": [
      "Uncrustify"
    ],
    "grammars": [
      "Arduino"
    ],
    "extensions": [
      "ino",
      "pde"
    ],
    "properties": {
      "configPath": {
        "type": "string",
        "default": "",
        "description": "Path to uncrustify config file. i.e. uncrustify.cfg (Supported by Uncrustify)",
        "title": "Config Path",
        "beautifiers": [
          "Uncrustify"
        ],
        "key": "configPath",
        "language": {
          "name": "Arduino",
          "namespace": "arduino"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Arduino Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Uncrustify",
        "description": "Default Beautifier to be used for Arduino",
        "enum": [
          "Uncrustify"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Arduino files on save"
      }
    }
  },
  "bash": {
    "title": "Bash",
    "type": "object",
    "description": "Options for language Bash",
    "collapsed": true,
    "scope": [
      "source.sh",
      "source.bash"
    ],
    "beautifiers": [
      "beautysh"
    ],
    "grammars": [
      "Shell Script"
    ],
    "extensions": [
      "bash",
      "sh"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by beautysh)",
        "title": "Indent size",
        "beautifiers": [
          "beautysh"
        ],
        "key": "indent_size",
        "language": {
          "name": "Bash",
          "namespace": "bash"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Bash Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "beautysh",
        "description": "Default Beautifier to be used for Bash",
        "enum": [
          "beautysh"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Bash files on save"
      }
    }
  },
  "cs": {
    "title": "C#",
    "type": "object",
    "description": "Options for language C#",
    "collapsed": true,
    "beautifiers": [
      "Uncrustify"
    ],
    "grammars": [
      "C#"
    ],
    "extensions": [
      "cs"
    ],
    "properties": {
      "configPath": {
        "title": "Config Path",
        "type": "string",
        "default": "",
        "description": "Path to uncrustify config file. i.e. uncrustify.cfg (Supported by Uncrustify)",
        "beautifiers": [
          "Uncrustify"
        ],
        "key": "configPath",
        "language": {
          "name": "C#",
          "namespace": "cs"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable C# Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Uncrustify",
        "description": "Default Beautifier to be used for C#",
        "enum": [
          "Uncrustify"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify C# files on save"
      }
    }
  },
  "c": {
    "title": "C",
    "type": "object",
    "description": "Options for language C",
    "collapsed": true,
    "beautifiers": [
      "Uncrustify",
      "clang-format"
    ],
    "grammars": [
      "C",
      "opencl"
    ],
    "extensions": [
      "h",
      "c",
      "cl"
    ],
    "properties": {
      "configPath": {
        "type": "string",
        "default": "",
        "description": "Path to uncrustify config file. i.e. uncrustify.cfg (Supported by Uncrustify)",
        "title": "Config Path",
        "beautifiers": [
          "Uncrustify"
        ],
        "key": "configPath",
        "language": {
          "name": "C",
          "namespace": "c"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable C Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Uncrustify",
        "description": "Default Beautifier to be used for C",
        "enum": [
          "Uncrustify",
          "clang-format"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify C files on save"
      }
    }
  },
  "clj": {
    "title": "Clojure",
    "type": "object",
    "description": "Options for language Clojure",
    "collapsed": true,
    "beautifiers": [
      "cljfmt"
    ],
    "grammars": [
      "Clojure"
    ],
    "extensions": [
      "clj",
      "cljs",
      "edn"
    ],
    "properties": {
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Clojure Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "cljfmt",
        "description": "Default Beautifier to be used for Clojure",
        "enum": [
          "cljfmt"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Clojure files on save"
      }
    }
  },
  "coffeescript": {
    "title": "CoffeeScript",
    "type": "object",
    "description": "Options for language CoffeeScript",
    "collapsed": true,
    "beautifiers": [
      "Coffee Formatter",
      "coffee-fmt"
    ],
    "grammars": [
      "CoffeeScript"
    ],
    "extensions": [
      "coffee"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Coffee Formatter, coffee-fmt)",
        "title": "Indent size",
        "beautifiers": [
          "Coffee Formatter",
          "coffee-fmt"
        ],
        "key": "indent_size",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by Coffee Formatter, coffee-fmt)",
        "title": "Indent char",
        "beautifiers": [
          "Coffee Formatter",
          "coffee-fmt"
        ],
        "key": "indent_char",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "indent_level": {
        "type": "integer",
        "default": 0,
        "description": "Initial indentation level (Supported by Coffee Formatter)",
        "title": "Indent level",
        "beautifiers": [
          "Coffee Formatter"
        ],
        "key": "indent_level",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "indent_with_tabs": {
        "type": "boolean",
        "default": null,
        "description": "Indentation uses tabs, overrides `Indent Size` and `Indent Char` (Supported by Coffee Formatter, coffee-fmt)",
        "title": "Indent with tabs",
        "beautifiers": [
          "Coffee Formatter",
          "coffee-fmt"
        ],
        "key": "indent_with_tabs",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by Coffee Formatter)",
        "title": "Preserve newlines",
        "beautifiers": [
          "Coffee Formatter"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "max_preserve_newlines": {
        "type": "integer",
        "default": 10,
        "description": "Number of line-breaks to be preserved in one chunk (Supported by Coffee Formatter)",
        "title": "Max preserve newlines",
        "beautifiers": [
          "Coffee Formatter"
        ],
        "key": "max_preserve_newlines",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "space_in_paren": {
        "type": "boolean",
        "default": false,
        "description": "Add padding spaces within paren, ie. f( a, b ) (Supported by Coffee Formatter)",
        "title": "Space in paren",
        "beautifiers": [
          "Coffee Formatter"
        ],
        "key": "space_in_paren",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "jslint_happy": {
        "type": "boolean",
        "default": false,
        "description": "Enable jslint-stricter mode (Supported by Coffee Formatter)",
        "title": "Jslint happy",
        "beautifiers": [
          "Coffee Formatter"
        ],
        "key": "jslint_happy",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "space_after_anon_function": {
        "type": "boolean",
        "default": false,
        "description": "Add a space before an anonymous function's parens, ie. function () (Supported by Coffee Formatter)",
        "title": "Space after anon function",
        "beautifiers": [
          "Coffee Formatter"
        ],
        "key": "space_after_anon_function",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "brace_style": {
        "type": "string",
        "default": "collapse",
        "enum": [
          "collapse",
          "collapse-preserve-inline",
          "expand",
          "end-expand",
          "none"
        ],
        "description": "[collapse|collapse-preserve-inline|expand|end-expand|none] (Supported by Coffee Formatter)",
        "title": "Brace style",
        "beautifiers": [
          "Coffee Formatter"
        ],
        "key": "brace_style",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "break_chained_methods": {
        "type": "boolean",
        "default": false,
        "description": "Break chained method calls across subsequent lines (Supported by Coffee Formatter)",
        "title": "Break chained methods",
        "beautifiers": [
          "Coffee Formatter"
        ],
        "key": "break_chained_methods",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "keep_array_indentation": {
        "type": "boolean",
        "default": false,
        "description": "Preserve array indentation (Supported by Coffee Formatter)",
        "title": "Keep array indentation",
        "beautifiers": [
          "Coffee Formatter"
        ],
        "key": "keep_array_indentation",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "keep_function_indentation": {
        "type": "boolean",
        "default": false,
        "description": " (Supported by Coffee Formatter)",
        "title": "Keep function indentation",
        "beautifiers": [
          "Coffee Formatter"
        ],
        "key": "keep_function_indentation",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "space_before_conditional": {
        "type": "boolean",
        "default": true,
        "description": " (Supported by Coffee Formatter)",
        "title": "Space before conditional",
        "beautifiers": [
          "Coffee Formatter"
        ],
        "key": "space_before_conditional",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "eval_code": {
        "type": "boolean",
        "default": false,
        "description": " (Supported by Coffee Formatter)",
        "title": "Eval code",
        "beautifiers": [
          "Coffee Formatter"
        ],
        "key": "eval_code",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "unescape_strings": {
        "type": "boolean",
        "default": false,
        "description": "Decode printable characters encoded in xNN notation (Supported by Coffee Formatter)",
        "title": "Unescape strings",
        "beautifiers": [
          "Coffee Formatter"
        ],
        "key": "unescape_strings",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 0,
        "description": "Wrap lines at next opportunity after N characters (Supported by Coffee Formatter)",
        "title": "Wrap line length",
        "beautifiers": [
          "Coffee Formatter"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "end_with_newline": {
        "type": "boolean",
        "default": false,
        "description": "End output with newline (Supported by Coffee Formatter)",
        "title": "End with newline",
        "beautifiers": [
          "Coffee Formatter"
        ],
        "key": "end_with_newline",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "end_with_comma": {
        "type": "boolean",
        "default": false,
        "description": "If a terminating comma should be inserted into arrays, object literals, and destructured objects. (Supported by Coffee Formatter)",
        "title": "End with comma",
        "beautifiers": [
          "Coffee Formatter"
        ],
        "key": "end_with_comma",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "end_of_line": {
        "type": "string",
        "default": "System Default",
        "enum": [
          "CRLF",
          "LF",
          "System Default"
        ],
        "description": "Override EOL from line-ending-selector (Supported by Coffee Formatter)",
        "title": "End of line",
        "beautifiers": [
          "Coffee Formatter"
        ],
        "key": "end_of_line",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable CoffeeScript Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "coffee-fmt",
        "description": "Default Beautifier to be used for CoffeeScript",
        "enum": [
          "Coffee Formatter",
          "coffee-fmt"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify CoffeeScript files on save"
      }
    }
  },
  "cfml": {
    "title": "Coldfusion",
    "type": "object",
    "description": "Options for language Coldfusion",
    "collapsed": true,
    "scope": [
      "text.html"
    ],
    "beautifiers": [
      "Pretty Diff"
    ],
    "grammars": [
      "html"
    ],
    "extensions": [
      "cfm",
      "cfml",
      "cfc"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "Coldfusion",
          "namespace": "cfml"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "minimum": 0,
        "description": "Indentation character (Supported by Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "Coldfusion",
          "namespace": "cfml"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 250,
        "description": "Maximum characters per line (0 disables) (Supported by Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "Coldfusion",
          "namespace": "cfml"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "Coldfusion",
          "namespace": "cfml"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Coldfusion Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Pretty Diff",
        "description": "Default Beautifier to be used for Coldfusion",
        "enum": [
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Coldfusion files on save"
      }
    }
  },
  "cpp": {
    "title": "C++",
    "type": "object",
    "description": "Options for language C++",
    "collapsed": true,
    "beautifiers": [
      "Uncrustify",
      "clang-format"
    ],
    "grammars": [
      "C++"
    ],
    "extensions": [
      "h",
      "hh",
      "cc",
      "cpp",
      "cxx",
      "C",
      "cu",
      "c++",
      "hpp",
      "hxx",
      "h++",
      "cuh"
    ],
    "properties": {
      "configPath": {
        "title": "Config Path",
        "type": "string",
        "default": "",
        "description": "Path to uncrustify config file. i.e. uncrustify.cfg (Supported by Uncrustify)",
        "beautifiers": [
          "Uncrustify"
        ],
        "key": "configPath",
        "language": {
          "name": "C++",
          "namespace": "cpp"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable C++ Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Uncrustify",
        "description": "Default Beautifier to be used for C++",
        "enum": [
          "Uncrustify",
          "clang-format"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify C++ files on save"
      }
    }
  },
  "crystal": {
    "title": "Crystal",
    "type": "object",
    "description": "Options for language Crystal",
    "collapsed": true,
    "beautifiers": [
      "Crystal"
    ],
    "grammars": [
      "Crystal"
    ],
    "extensions": [
      "cr"
    ],
    "properties": {
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Crystal Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Crystal",
        "description": "Default Beautifier to be used for Crystal",
        "enum": [
          "Crystal"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Crystal files on save"
      }
    }
  },
  "css": {
    "title": "CSS",
    "type": "object",
    "description": "Options for language CSS",
    "collapsed": true,
    "scope": [
      "source.css"
    ],
    "beautifiers": [
      "CSScomb",
      "JS Beautify",
      "Pretty Diff",
      "SassConvert"
    ],
    "grammars": [
      "CSS"
    ],
    "extensions": [
      "css"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "minimum": 0,
        "description": "Indentation character (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "selector_separator_newline": {
        "type": "boolean",
        "default": false,
        "description": "Add a newline between multiple selectors (Supported by JS Beautify)",
        "title": "Selector separator newline",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "selector_separator_newline",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "newline_between_rules": {
        "type": "boolean",
        "default": true,
        "description": "Add a newline between CSS rules (Supported by JS Beautify, Pretty Diff)",
        "title": "Newline between rules",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "newline_between_rules",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": false,
        "description": "Retain empty lines. Consecutive empty lines will be converted to a single empty line. (Supported by JS Beautify, Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 0,
        "description": "Maximum amount of characters per line (0 = disable) (Supported by JS Beautify, Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "end_with_newline": {
        "type": "boolean",
        "default": false,
        "description": "End output with newline (Supported by JS Beautify)",
        "title": "End with newline",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "end_with_newline",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "indent_comments": {
        "type": "boolean",
        "default": true,
        "description": "Determines whether comments should be indented. (Supported by Pretty Diff)",
        "title": "Indent comments",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_comments",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "force_indentation": {
        "type": "boolean",
        "default": false,
        "description": "if indentation should be forcefully applied to markup even if it disruptively adds unintended whitespace to the documents rendered output (Supported by Pretty Diff)",
        "title": "Force indentation",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "force_indentation",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "convert_quotes": {
        "type": "string",
        "default": "none",
        "description": "Convert the quote characters delimiting strings from either double or single quotes to the other. (Supported by Pretty Diff)",
        "enum": [
          "none",
          "double",
          "single"
        ],
        "title": "Convert quotes",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "convert_quotes",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "align_assignments": {
        "type": "boolean",
        "default": false,
        "description": "If lists of assignments or properties should be vertically aligned for faster and easier reading. (Supported by Pretty Diff)",
        "title": "Align assignments",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "align_assignments",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "no_lead_zero": {
        "type": "boolean",
        "default": false,
        "description": "If in CSS values leading 0s immediately preceding a decimal should be removed or prevented. (Supported by Pretty Diff)",
        "title": "No lead zero",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "no_lead_zero",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "configPath": {
        "title": "comb custom config file",
        "type": "string",
        "default": "",
        "description": "Path to custom CSScomb config file, used in absence of a `.csscomb.json` or `.csscomb.cson` at the root of your project. (Supported by CSScomb)",
        "beautifiers": [
          "CSScomb"
        ],
        "key": "configPath",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "predefinedConfig": {
        "title": "comb predefined config",
        "type": "string",
        "default": "csscomb",
        "description": "Used if neither a project or custom config file exists. (Supported by CSScomb)",
        "enum": [
          "csscomb",
          "yandex",
          "zen"
        ],
        "beautifiers": [
          "CSScomb"
        ],
        "key": "predefinedConfig",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable CSS Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "JS Beautify",
        "description": "Default Beautifier to be used for CSS",
        "enum": [
          "CSScomb",
          "JS Beautify",
          "Pretty Diff",
          "SassConvert"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify CSS files on save"
      }
    }
  },
  "csv": {
    "title": "CSV",
    "type": "object",
    "description": "Options for language CSV",
    "collapsed": true,
    "beautifiers": [
      "Pretty Diff"
    ],
    "grammars": [
      "CSV"
    ],
    "extensions": [
      "csv"
    ],
    "properties": {
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable CSV Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Pretty Diff",
        "description": "Default Beautifier to be used for CSV",
        "enum": [
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify CSV files on save"
      }
    }
  },
  "d": {
    "title": "D",
    "type": "object",
    "description": "Options for language D",
    "collapsed": true,
    "beautifiers": [
      "Uncrustify",
      "dfmt"
    ],
    "grammars": [
      "D"
    ],
    "extensions": [
      "d"
    ],
    "properties": {
      "configPath": {
        "type": "string",
        "default": "",
        "description": "Path to uncrustify config file. i.e. uncrustify.cfg (Supported by Uncrustify)",
        "title": "Config Path",
        "beautifiers": [
          "Uncrustify"
        ],
        "key": "configPath",
        "language": {
          "name": "D",
          "namespace": "d"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable D Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Uncrustify",
        "description": "Default Beautifier to be used for D",
        "enum": [
          "Uncrustify",
          "dfmt"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify D files on save"
      }
    }
  },
  "ejs": {
    "title": "EJS",
    "type": "object",
    "description": "Options for language EJS",
    "collapsed": true,
    "beautifiers": [
      "JS Beautify",
      "Pretty Diff"
    ],
    "grammars": [
      "EJS",
      "JavaScript Template",
      "HTML (Angular)"
    ],
    "extensions": [
      "ejs"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_level": {
        "type": "integer",
        "default": 0,
        "description": "Initial indentation level (Supported by JS Beautify)",
        "title": "Indent level",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "indent_level",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "indent_with_tabs": {
        "type": "boolean",
        "default": null,
        "description": "Indentation uses tabs, overrides `Indent Size` and `Indent Char` (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent with tabs",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_with_tabs",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by JS Beautify, Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "max_preserve_newlines": {
        "type": "integer",
        "default": 10,
        "description": "Number of line-breaks to be preserved in one chunk (Supported by JS Beautify)",
        "title": "Max preserve newlines",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "max_preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "space_in_paren": {
        "type": "boolean",
        "default": false,
        "description": "Add padding spaces within paren, ie. f( a, b ) (Supported by JS Beautify, Pretty Diff)",
        "title": "Space in paren",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "space_in_paren",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "jslint_happy": {
        "type": "boolean",
        "default": false,
        "description": "Enable jslint-stricter mode (Supported by JS Beautify)",
        "title": "Jslint happy",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "jslint_happy",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "space_after_anon_function": {
        "type": "boolean",
        "default": false,
        "description": "Add a space before an anonymous function's parens, ie. function () (Supported by JS Beautify, Pretty Diff)",
        "title": "Space after anon function",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "space_after_anon_function",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "brace_style": {
        "type": "string",
        "default": "collapse",
        "enum": [
          "collapse",
          "collapse-preserve-inline",
          "expand",
          "end-expand",
          "none"
        ],
        "description": "[collapse|expand|end-expand|none] (Supported by JS Beautify)",
        "title": "Brace style",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "brace_style",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "break_chained_methods": {
        "type": "boolean",
        "default": false,
        "description": "Break chained method calls across subsequent lines (Supported by JS Beautify, Pretty Diff)",
        "title": "Break chained methods",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "break_chained_methods",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "keep_array_indentation": {
        "type": "boolean",
        "default": false,
        "description": "Preserve array indentation (Supported by JS Beautify)",
        "title": "Keep array indentation",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "keep_array_indentation",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "keep_function_indentation": {
        "type": "boolean",
        "default": false,
        "description": " (Supported by JS Beautify)",
        "title": "Keep function indentation",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "keep_function_indentation",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "space_before_conditional": {
        "type": "boolean",
        "default": true,
        "description": " (Supported by JS Beautify)",
        "title": "Space before conditional",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "space_before_conditional",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "eval_code": {
        "type": "boolean",
        "default": false,
        "description": " (Supported by JS Beautify)",
        "title": "Eval code",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "eval_code",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "unescape_strings": {
        "type": "boolean",
        "default": false,
        "description": "Decode printable characters encoded in xNN notation (Supported by JS Beautify)",
        "title": "Unescape strings",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "unescape_strings",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 250,
        "description": "Maximum characters per line (0 disables) (Supported by JS Beautify, Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "end_with_newline": {
        "type": "boolean",
        "default": false,
        "description": "End output with newline (Supported by JS Beautify)",
        "title": "End with newline",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "end_with_newline",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "end_with_comma": {
        "type": "boolean",
        "default": false,
        "description": "If a terminating comma should be inserted into arrays, object literals, and destructured objects. (Supported by JS Beautify, Pretty Diff)",
        "title": "End with comma",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "end_with_comma",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "end_of_line": {
        "type": "string",
        "default": "System Default",
        "enum": [
          "CRLF",
          "LF",
          "System Default"
        ],
        "description": "Override EOL from line-ending-selector (Supported by JS Beautify)",
        "title": "End of line",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "end_of_line",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "indent_inner_html": {
        "type": "boolean",
        "default": false,
        "description": "Indent <head> and <body> sections. (Supported by JS Beautify)",
        "title": "Indent inner html",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "indent_inner_html",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_scripts": {
        "type": "string",
        "default": "normal",
        "enum": [
          "keep",
          "separate",
          "normal"
        ],
        "description": "[keep|separate|normal] (Supported by JS Beautify)",
        "title": "Indent scripts",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "indent_scripts",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_attributes": {
        "type": "string",
        "default": "auto",
        "enum": [
          "auto",
          "force",
          "force-aligned",
          "force-expand-multiline"
        ],
        "description": "Wrap attributes to new lines [auto|force|force-aligned|force-expand-multiline] (Supported by JS Beautify)",
        "title": "Wrap attributes",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "wrap_attributes",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_attributes_indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indent wrapped attributes to after N characters (Supported by JS Beautify)",
        "title": "Wrap attributes indent size",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "wrap_attributes_indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "unformatted": {
        "type": "array",
        "default": [
          "a",
          "abbr",
          "area",
          "audio",
          "b",
          "bdi",
          "bdo",
          "br",
          "button",
          "canvas",
          "cite",
          "code",
          "data",
          "datalist",
          "del",
          "dfn",
          "em",
          "embed",
          "i",
          "iframe",
          "img",
          "input",
          "ins",
          "kbd",
          "keygen",
          "label",
          "map",
          "mark",
          "math",
          "meter",
          "noscript",
          "object",
          "output",
          "progress",
          "q",
          "ruby",
          "s",
          "samp",
          "select",
          "small",
          "span",
          "strong",
          "sub",
          "sup",
          "svg",
          "template",
          "textarea",
          "time",
          "u",
          "var",
          "video",
          "wbr",
          "text",
          "acronym",
          "address",
          "big",
          "dt",
          "ins",
          "small",
          "strike",
          "tt",
          "pre",
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6"
        ],
        "items": {
          "type": "string"
        },
        "description": "List of tags (defaults to inline) that should not be reformatted (Supported by JS Beautify)",
        "title": "Unformatted",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "unformatted",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "extra_liners": {
        "type": "array",
        "default": [
          "head",
          "body",
          "/html"
        ],
        "items": {
          "type": "string"
        },
        "description": "List of tags (defaults to [head,body,/html] that should have an extra newline before them. (Supported by JS Beautify)",
        "title": "Extra liners",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "extra_liners",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable EJS Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "JS Beautify",
        "description": "Default Beautifier to be used for EJS",
        "enum": [
          "JS Beautify",
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify EJS files on save"
      }
    }
  },
  "elm": {
    "title": "Elm",
    "type": "object",
    "description": "Options for language Elm",
    "collapsed": true,
    "beautifiers": [
      "elm-format"
    ],
    "grammars": [
      "Elm"
    ],
    "extensions": [
      "elm"
    ],
    "properties": {
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Elm Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "elm-format",
        "description": "Default Beautifier to be used for Elm",
        "enum": [
          "elm-format"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Elm files on save"
      }
    }
  },
  "erb": {
    "title": "ERB",
    "type": "object",
    "description": "Options for language ERB",
    "collapsed": true,
    "beautifiers": [
      "HTML Beautifier",
      "Pretty Diff"
    ],
    "grammars": [
      "HTML (Ruby - ERB)",
      "HTML (Rails)"
    ],
    "extensions": [
      "erb"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by HTML Beautifier, Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "HTML Beautifier",
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 250,
        "description": "Maximum characters per line (0 disables) (Supported by Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable ERB Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Pretty Diff",
        "description": "Default Beautifier to be used for ERB",
        "enum": [
          "HTML Beautifier",
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify ERB files on save"
      }
    }
  },
  "erlang": {
    "title": "Erlang",
    "type": "object",
    "description": "Options for language Erlang",
    "collapsed": true,
    "beautifiers": [
      "erl_tidy"
    ],
    "grammars": [
      "Erlang"
    ],
    "extensions": [
      "erl"
    ],
    "properties": {
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Erlang Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "erl_tidy",
        "description": "Default Beautifier to be used for Erlang",
        "enum": [
          "erl_tidy"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Erlang files on save"
      }
    }
  },
  "gherkin": {
    "title": "gherkin",
    "type": "object",
    "description": "Options for language gherkin",
    "collapsed": true,
    "scope": [],
    "beautifiers": [
      "Gherkin formatter"
    ],
    "grammars": [
      "Gherkin"
    ],
    "extensions": [
      "feature"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Gherkin formatter)",
        "title": "Indent size",
        "beautifiers": [
          "Gherkin formatter"
        ],
        "key": "indent_size",
        "language": {
          "name": "gherkin",
          "namespace": "gherkin"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "minimum": 0,
        "description": "Indentation character (Supported by Gherkin formatter)",
        "title": "Indent char",
        "beautifiers": [
          "Gherkin formatter"
        ],
        "key": "indent_char",
        "language": {
          "name": "gherkin",
          "namespace": "gherkin"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable gherkin Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Gherkin formatter",
        "description": "Default Beautifier to be used for gherkin",
        "enum": [
          "Gherkin formatter"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify gherkin files on save"
      }
    }
  },
  "glsl": {
    "title": "GLSL",
    "type": "object",
    "description": "Options for language GLSL",
    "collapsed": true,
    "beautifiers": [
      "clang-format"
    ],
    "grammars": [
      "C",
      "opencl",
      "GLSL"
    ],
    "extensions": [
      "vert",
      "frag"
    ],
    "properties": {
      "configPath": {
        "type": "string",
        "default": "",
        "description": "Path to clang-format config file. i.e. clang-format.cfg (Supported by clang-format)",
        "title": "Config Path",
        "beautifiers": [
          "clang-format"
        ],
        "key": "configPath",
        "language": {
          "name": "GLSL",
          "namespace": "glsl"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable GLSL Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "clang-format",
        "description": "Default Beautifier to be used for GLSL",
        "enum": [
          "clang-format"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify GLSL files on save"
      }
    }
  },
  "go": {
    "title": "Go",
    "type": "object",
    "description": "Options for language Go",
    "collapsed": true,
    "beautifiers": [
      "gofmt",
      "goimports"
    ],
    "grammars": [
      "Go"
    ],
    "extensions": [
      "go"
    ],
    "properties": {
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Go Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "gofmt",
        "description": "Default Beautifier to be used for Go",
        "enum": [
          "gofmt",
          "goimports"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Go files on save"
      }
    }
  },
  "gohtml": {
    "title": "Golang Template",
    "type": "object",
    "description": "Options for language Golang Template",
    "collapsed": true,
    "beautifiers": [
      "Pretty Diff"
    ],
    "grammars": [
      "HTML (Go)",
      "Go Template"
    ],
    "extensions": [
      "gohtml"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 250,
        "description": "Maximum characters per line (0 disables) (Supported by Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Golang Template Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Pretty Diff",
        "description": "Default Beautifier to be used for Golang Template",
        "enum": [
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Golang Template files on save"
      }
    }
  },
  "fortran": {
    "title": "Fortran",
    "type": "object",
    "description": "Options for language Fortran",
    "collapsed": true,
    "beautifiers": [
      "Fortran Beautifier"
    ],
    "grammars": [
      "Fortran - Modern"
    ],
    "extensions": [
      "f90",
      "F90",
      "f95",
      "F95",
      "f03",
      "F03",
      "f08",
      "F08"
    ],
    "properties": {
      "emacs_path": {
        "type": "string",
        "default": "",
        "description": "Path to the `emacs` executable (Supported by Fortran Beautifier)",
        "title": "Emacs path",
        "beautifiers": [
          "Fortran Beautifier"
        ],
        "key": "emacs_path",
        "language": {
          "name": "Fortran",
          "namespace": "fortran"
        }
      },
      "emacs_script_path": {
        "type": "string",
        "default": "",
        "description": "Path to the emacs script (Supported by Fortran Beautifier)",
        "title": "Emacs script path",
        "beautifiers": [
          "Fortran Beautifier"
        ],
        "key": "emacs_script_path",
        "language": {
          "name": "Fortran",
          "namespace": "fortran"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Fortran Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Fortran Beautifier",
        "description": "Default Beautifier to be used for Fortran",
        "enum": [
          "Fortran Beautifier"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Fortran files on save"
      }
    }
  },
  "handlebars": {
    "title": "Handlebars",
    "type": "object",
    "description": "Options for language Handlebars",
    "collapsed": true,
    "beautifiers": [
      "JS Beautify",
      "Pretty Diff"
    ],
    "grammars": [
      "Handlebars",
      "HTML (Handlebars)"
    ],
    "extensions": [
      "hbs",
      "handlebars"
    ],
    "properties": {
      "indent_inner_html": {
        "type": "boolean",
        "default": false,
        "description": "Indent <head> and <body> sections. (Supported by JS Beautify)",
        "title": "Indent inner html",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "indent_inner_html",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "brace_style": {
        "type": "string",
        "default": "collapse",
        "enum": [
          "collapse",
          "expand",
          "end-expand",
          "none"
        ],
        "description": "[collapse|expand|end-expand|none] (Supported by JS Beautify)",
        "title": "Brace style",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "brace_style",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_scripts": {
        "type": "string",
        "default": "normal",
        "enum": [
          "keep",
          "separate",
          "normal"
        ],
        "description": "[keep|separate|normal] (Supported by JS Beautify)",
        "title": "Indent scripts",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "indent_scripts",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 250,
        "description": "Maximum characters per line (0 disables) (Supported by JS Beautify, Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_attributes": {
        "type": "string",
        "default": "auto",
        "enum": [
          "auto",
          "force",
          "force-aligned",
          "force-expand-multiline"
        ],
        "description": "Wrap attributes to new lines [auto|force|force-aligned|force-expand-multiline] (Supported by JS Beautify)",
        "title": "Wrap attributes",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "wrap_attributes",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_attributes_indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indent wrapped attributes to after N characters (Supported by JS Beautify)",
        "title": "Wrap attributes indent size",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "wrap_attributes_indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by JS Beautify, Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "max_preserve_newlines": {
        "type": "integer",
        "default": 10,
        "description": "Number of line-breaks to be preserved in one chunk (Supported by JS Beautify)",
        "title": "Max preserve newlines",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "max_preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "unformatted": {
        "type": "array",
        "default": [
          "a",
          "abbr",
          "area",
          "audio",
          "b",
          "bdi",
          "bdo",
          "br",
          "button",
          "canvas",
          "cite",
          "code",
          "data",
          "datalist",
          "del",
          "dfn",
          "em",
          "embed",
          "i",
          "iframe",
          "img",
          "input",
          "ins",
          "kbd",
          "keygen",
          "label",
          "map",
          "mark",
          "math",
          "meter",
          "noscript",
          "object",
          "output",
          "progress",
          "q",
          "ruby",
          "s",
          "samp",
          "select",
          "small",
          "span",
          "strong",
          "sub",
          "sup",
          "svg",
          "template",
          "textarea",
          "time",
          "u",
          "var",
          "video",
          "wbr",
          "text",
          "acronym",
          "address",
          "big",
          "dt",
          "ins",
          "small",
          "strike",
          "tt",
          "pre",
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6"
        ],
        "items": {
          "type": "string"
        },
        "description": "List of tags (defaults to inline) that should not be reformatted (Supported by JS Beautify)",
        "title": "Unformatted",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "unformatted",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "end_with_newline": {
        "type": "boolean",
        "default": false,
        "description": "End output with newline (Supported by JS Beautify)",
        "title": "End with newline",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "end_with_newline",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "extra_liners": {
        "type": "array",
        "default": [
          "head",
          "body",
          "/html"
        ],
        "items": {
          "type": "string"
        },
        "description": "List of tags (defaults to [head,body,/html] that should have an extra newline before them. (Supported by JS Beautify)",
        "title": "Extra liners",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "extra_liners",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Handlebars Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "JS Beautify",
        "description": "Default Beautifier to be used for Handlebars",
        "enum": [
          "JS Beautify",
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Handlebars files on save"
      }
    }
  },
  "haskell": {
    "title": "Haskell",
    "type": "object",
    "description": "Options for language Haskell",
    "collapsed": true,
    "beautifiers": [
      "stylish-haskell"
    ],
    "grammars": [
      "Haskell"
    ],
    "extensions": [
      "hs"
    ],
    "properties": {
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Haskell Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "stylish-haskell",
        "description": "Default Beautifier to be used for Haskell",
        "enum": [
          "stylish-haskell"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Haskell files on save"
      }
    }
  },
  "html": {
    "title": "HTML",
    "type": "object",
    "description": "Options for language HTML",
    "collapsed": true,
    "scope": [
      "text.html"
    ],
    "beautifiers": [
      "JS Beautify",
      "Pretty Diff"
    ],
    "grammars": [
      "HTML"
    ],
    "extensions": [
      "html"
    ],
    "properties": {
      "indent_inner_html": {
        "type": "boolean",
        "default": false,
        "description": "Indent <head> and <body> sections. (Supported by JS Beautify)",
        "title": "Indent inner html",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "indent_inner_html",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "brace_style": {
        "type": "string",
        "default": "collapse",
        "enum": [
          "collapse",
          "expand",
          "end-expand",
          "none"
        ],
        "description": "[collapse|expand|end-expand|none] (Supported by JS Beautify)",
        "title": "Brace style",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "brace_style",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_scripts": {
        "type": "string",
        "default": "normal",
        "enum": [
          "keep",
          "separate",
          "normal"
        ],
        "description": "[keep|separate|normal] (Supported by JS Beautify)",
        "title": "Indent scripts",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "indent_scripts",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 250,
        "description": "Maximum characters per line (0 disables) (Supported by JS Beautify, Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_attributes": {
        "type": "string",
        "default": "auto",
        "enum": [
          "auto",
          "force",
          "force-aligned",
          "force-expand-multiline"
        ],
        "description": "Wrap attributes to new lines [auto|force|force-aligned|force-expand-multiline] (Supported by JS Beautify)",
        "title": "Wrap attributes",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "wrap_attributes",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_attributes_indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indent wrapped attributes to after N characters (Supported by JS Beautify)",
        "title": "Wrap attributes indent size",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "wrap_attributes_indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by JS Beautify, Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "max_preserve_newlines": {
        "type": "integer",
        "default": 10,
        "description": "Number of line-breaks to be preserved in one chunk (Supported by JS Beautify)",
        "title": "Max preserve newlines",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "max_preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "unformatted": {
        "type": "array",
        "default": [
          "a",
          "abbr",
          "area",
          "audio",
          "b",
          "bdi",
          "bdo",
          "br",
          "button",
          "canvas",
          "cite",
          "code",
          "data",
          "datalist",
          "del",
          "dfn",
          "em",
          "embed",
          "i",
          "iframe",
          "img",
          "input",
          "ins",
          "kbd",
          "keygen",
          "label",
          "map",
          "mark",
          "math",
          "meter",
          "noscript",
          "object",
          "output",
          "progress",
          "q",
          "ruby",
          "s",
          "samp",
          "select",
          "small",
          "span",
          "strong",
          "sub",
          "sup",
          "svg",
          "template",
          "textarea",
          "time",
          "u",
          "var",
          "video",
          "wbr",
          "text",
          "acronym",
          "address",
          "big",
          "dt",
          "ins",
          "small",
          "strike",
          "tt",
          "pre",
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6"
        ],
        "items": {
          "type": "string"
        },
        "description": "List of tags (defaults to inline) that should not be reformatted (Supported by JS Beautify)",
        "title": "Unformatted",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "unformatted",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "end_with_newline": {
        "type": "boolean",
        "default": false,
        "description": "End output with newline (Supported by JS Beautify)",
        "title": "End with newline",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "end_with_newline",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "extra_liners": {
        "type": "array",
        "default": [
          "head",
          "body",
          "/html"
        ],
        "items": {
          "type": "string"
        },
        "description": "List of tags (defaults to [head,body,/html] that should have an extra newline before them. (Supported by JS Beautify)",
        "title": "Extra liners",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "extra_liners",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable HTML Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "JS Beautify",
        "description": "Default Beautifier to be used for HTML",
        "enum": [
          "JS Beautify",
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify HTML files on save"
      }
    }
  },
  "jade": {
    "title": "Jade",
    "type": "object",
    "description": "Options for language Jade",
    "collapsed": true,
    "scope": [
      "text.jade"
    ],
    "beautifiers": [
      "Pug Beautify"
    ],
    "grammars": [
      "Jade",
      "Pug"
    ],
    "extensions": [
      "jade",
      "pug"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Pug Beautify)",
        "title": "Indent size",
        "beautifiers": [
          "Pug Beautify"
        ],
        "key": "indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by Pug Beautify)",
        "title": "Indent char",
        "beautifiers": [
          "Pug Beautify"
        ],
        "key": "indent_char",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Jade Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Pug Beautify",
        "description": "Default Beautifier to be used for Jade",
        "enum": [
          "Pug Beautify"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Jade files on save"
      }
    }
  },
  "java": {
    "title": "Java",
    "type": "object",
    "description": "Options for language Java",
    "collapsed": true,
    "beautifiers": [
      "Uncrustify"
    ],
    "grammars": [
      "Java"
    ],
    "extensions": [
      "java"
    ],
    "properties": {
      "configPath": {
        "type": "string",
        "default": "",
        "description": "Path to uncrustify config file. i.e. uncrustify.cfg (Supported by Uncrustify)",
        "title": "Config Path",
        "beautifiers": [
          "Uncrustify"
        ],
        "key": "configPath",
        "language": {
          "name": "Java",
          "namespace": "java"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Java Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Uncrustify",
        "description": "Default Beautifier to be used for Java",
        "enum": [
          "Uncrustify"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Java files on save"
      }
    }
  },
  "js": {
    "title": "JavaScript",
    "type": "object",
    "description": "Options for language JavaScript",
    "collapsed": true,
    "scope": [
      "source.js"
    ],
    "beautifiers": [
      "JS Beautify",
      "JSCS Fixer",
      "ESLint Fixer",
      "Pretty Diff"
    ],
    "grammars": [
      "JavaScript"
    ],
    "extensions": [
      "js"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "indent_level": {
        "type": "integer",
        "default": 0,
        "description": "Initial indentation level (Supported by JS Beautify)",
        "title": "Indent level",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "indent_level",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "indent_with_tabs": {
        "type": "boolean",
        "default": null,
        "description": "Indentation uses tabs, overrides `Indent Size` and `Indent Char` (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent with tabs",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_with_tabs",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by JS Beautify, Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "max_preserve_newlines": {
        "type": "integer",
        "default": 10,
        "description": "Number of line-breaks to be preserved in one chunk (Supported by JS Beautify)",
        "title": "Max preserve newlines",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "max_preserve_newlines",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "space_in_paren": {
        "type": "boolean",
        "default": false,
        "description": "Add padding spaces within paren, ie. f( a, b ) (Supported by JS Beautify, Pretty Diff)",
        "title": "Space in paren",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "space_in_paren",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "jslint_happy": {
        "type": "boolean",
        "default": false,
        "description": "Enable jslint-stricter mode (Supported by JS Beautify)",
        "title": "Jslint happy",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "jslint_happy",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "space_after_anon_function": {
        "type": "boolean",
        "default": false,
        "description": "Add a space before an anonymous function's parens, ie. function () (Supported by JS Beautify, Pretty Diff)",
        "title": "Space after anon function",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "space_after_anon_function",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "brace_style": {
        "type": "string",
        "default": "collapse",
        "enum": [
          "collapse",
          "collapse-preserve-inline",
          "expand",
          "end-expand",
          "none"
        ],
        "description": "[collapse|collapse-preserve-inline|expand|end-expand|none] (Supported by JS Beautify)",
        "title": "Brace style",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "brace_style",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "break_chained_methods": {
        "type": "boolean",
        "default": false,
        "description": "Break chained method calls across subsequent lines (Supported by JS Beautify, Pretty Diff)",
        "title": "Break chained methods",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "break_chained_methods",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "keep_array_indentation": {
        "type": "boolean",
        "default": false,
        "description": "Preserve array indentation (Supported by JS Beautify)",
        "title": "Keep array indentation",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "keep_array_indentation",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "keep_function_indentation": {
        "type": "boolean",
        "default": false,
        "description": " (Supported by JS Beautify)",
        "title": "Keep function indentation",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "keep_function_indentation",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "space_before_conditional": {
        "type": "boolean",
        "default": true,
        "description": " (Supported by JS Beautify)",
        "title": "Space before conditional",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "space_before_conditional",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "eval_code": {
        "type": "boolean",
        "default": false,
        "description": " (Supported by JS Beautify)",
        "title": "Eval code",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "eval_code",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "unescape_strings": {
        "type": "boolean",
        "default": false,
        "description": "Decode printable characters encoded in xNN notation (Supported by JS Beautify)",
        "title": "Unescape strings",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "unescape_strings",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 0,
        "description": "Wrap lines at next opportunity after N characters (Supported by JS Beautify, Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "end_with_newline": {
        "type": "boolean",
        "default": false,
        "description": "End output with newline (Supported by JS Beautify)",
        "title": "End with newline",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "end_with_newline",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "end_with_comma": {
        "type": "boolean",
        "default": false,
        "description": "If a terminating comma should be inserted into arrays, object literals, and destructured objects. (Supported by JS Beautify, Pretty Diff)",
        "title": "End with comma",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "end_with_comma",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "end_of_line": {
        "type": "string",
        "default": "System Default",
        "enum": [
          "CRLF",
          "LF",
          "System Default"
        ],
        "description": "Override EOL from line-ending-selector (Supported by JS Beautify)",
        "title": "End of line",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "end_of_line",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable JavaScript Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "JS Beautify",
        "description": "Default Beautifier to be used for JavaScript",
        "enum": [
          "JS Beautify",
          "JSCS Fixer",
          "ESLint Fixer",
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify JavaScript files on save"
      }
    }
  },
  "json": {
    "title": "JSON",
    "type": "object",
    "description": "Options for language JSON",
    "collapsed": true,
    "beautifiers": [
      "JS Beautify",
      "Pretty Diff"
    ],
    "grammars": [
      "JSON"
    ],
    "extensions": [
      "json"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "indent_level": {
        "type": "integer",
        "default": 0,
        "description": "Initial indentation level (Supported by JS Beautify)",
        "title": "Indent level",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "indent_level",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "indent_with_tabs": {
        "type": "boolean",
        "default": null,
        "description": "Indentation uses tabs, overrides `Indent Size` and `Indent Char` (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent with tabs",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_with_tabs",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by JS Beautify, Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "max_preserve_newlines": {
        "type": "integer",
        "default": 10,
        "description": "Number of line-breaks to be preserved in one chunk (Supported by JS Beautify)",
        "title": "Max preserve newlines",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "max_preserve_newlines",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "space_in_paren": {
        "type": "boolean",
        "default": false,
        "description": "Add padding spaces within paren, ie. f( a, b ) (Supported by JS Beautify, Pretty Diff)",
        "title": "Space in paren",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "space_in_paren",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "jslint_happy": {
        "type": "boolean",
        "default": false,
        "description": "Enable jslint-stricter mode (Supported by JS Beautify)",
        "title": "Jslint happy",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "jslint_happy",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "space_after_anon_function": {
        "type": "boolean",
        "default": false,
        "description": "Add a space before an anonymous function's parens, ie. function () (Supported by JS Beautify, Pretty Diff)",
        "title": "Space after anon function",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "space_after_anon_function",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "brace_style": {
        "type": "string",
        "default": "collapse",
        "enum": [
          "collapse",
          "collapse-preserve-inline",
          "expand",
          "end-expand",
          "none"
        ],
        "description": "[collapse|collapse-preserve-inline|expand|end-expand|none] (Supported by JS Beautify)",
        "title": "Brace style",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "brace_style",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "break_chained_methods": {
        "type": "boolean",
        "default": false,
        "description": "Break chained method calls across subsequent lines (Supported by JS Beautify, Pretty Diff)",
        "title": "Break chained methods",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "break_chained_methods",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "keep_array_indentation": {
        "type": "boolean",
        "default": false,
        "description": "Preserve array indentation (Supported by JS Beautify)",
        "title": "Keep array indentation",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "keep_array_indentation",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "keep_function_indentation": {
        "type": "boolean",
        "default": false,
        "description": " (Supported by JS Beautify)",
        "title": "Keep function indentation",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "keep_function_indentation",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "space_before_conditional": {
        "type": "boolean",
        "default": true,
        "description": " (Supported by JS Beautify)",
        "title": "Space before conditional",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "space_before_conditional",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "eval_code": {
        "type": "boolean",
        "default": false,
        "description": " (Supported by JS Beautify)",
        "title": "Eval code",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "eval_code",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "unescape_strings": {
        "type": "boolean",
        "default": false,
        "description": "Decode printable characters encoded in xNN notation (Supported by JS Beautify)",
        "title": "Unescape strings",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "unescape_strings",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 0,
        "description": "Wrap lines at next opportunity after N characters (Supported by JS Beautify, Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "end_with_newline": {
        "type": "boolean",
        "default": false,
        "description": "End output with newline (Supported by JS Beautify)",
        "title": "End with newline",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "end_with_newline",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "end_with_comma": {
        "type": "boolean",
        "default": false,
        "description": "If a terminating comma should be inserted into arrays, object literals, and destructured objects. (Supported by JS Beautify, Pretty Diff)",
        "title": "End with comma",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "end_with_comma",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "end_of_line": {
        "type": "string",
        "default": "System Default",
        "enum": [
          "CRLF",
          "LF",
          "System Default"
        ],
        "description": "Override EOL from line-ending-selector (Supported by JS Beautify)",
        "title": "End of line",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "end_of_line",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable JSON Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "JS Beautify",
        "description": "Default Beautifier to be used for JSON",
        "enum": [
          "JS Beautify",
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify JSON files on save"
      }
    }
  },
  "jsx": {
    "title": "JSX",
    "type": "object",
    "description": "Options for language JSX",
    "collapsed": true,
    "beautifiers": [
      "JS Beautify",
      "Pretty Diff"
    ],
    "grammars": [
      "JSX",
      "JavaScript (JSX)",
      "Babel ES6 JavaScript",
      "JavaScript with JSX"
    ],
    "extensions": [
      "jsx",
      "js"
    ],
    "properties": {
      "e4x": {
        "type": "boolean",
        "default": true,
        "description": "Support e4x/jsx syntax (Supported by JS Beautify)",
        "title": "E4x",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "e4x",
        "language": {
          "name": "JSX",
          "namespace": "jsx"
        }
      },
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "indent_level": {
        "type": "integer",
        "default": 0,
        "description": "Initial indentation level (Supported by JS Beautify)",
        "title": "Indent level",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "indent_level",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "indent_with_tabs": {
        "type": "boolean",
        "default": null,
        "description": "Indentation uses tabs, overrides `Indent Size` and `Indent Char` (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent with tabs",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_with_tabs",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by JS Beautify, Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "max_preserve_newlines": {
        "type": "integer",
        "default": 10,
        "description": "Number of line-breaks to be preserved in one chunk (Supported by JS Beautify)",
        "title": "Max preserve newlines",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "max_preserve_newlines",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "space_in_paren": {
        "type": "boolean",
        "default": false,
        "description": "Add padding spaces within paren, ie. f( a, b ) (Supported by JS Beautify, Pretty Diff)",
        "title": "Space in paren",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "space_in_paren",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "jslint_happy": {
        "type": "boolean",
        "default": false,
        "description": "Enable jslint-stricter mode (Supported by JS Beautify)",
        "title": "Jslint happy",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "jslint_happy",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "space_after_anon_function": {
        "type": "boolean",
        "default": false,
        "description": "Add a space before an anonymous function's parens, ie. function () (Supported by JS Beautify, Pretty Diff)",
        "title": "Space after anon function",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "space_after_anon_function",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "brace_style": {
        "type": "string",
        "default": "collapse",
        "enum": [
          "collapse",
          "collapse-preserve-inline",
          "expand",
          "end-expand",
          "none"
        ],
        "description": "[collapse|collapse-preserve-inline|expand|end-expand|none] (Supported by JS Beautify)",
        "title": "Brace style",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "brace_style",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "break_chained_methods": {
        "type": "boolean",
        "default": false,
        "description": "Break chained method calls across subsequent lines (Supported by JS Beautify, Pretty Diff)",
        "title": "Break chained methods",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "break_chained_methods",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "keep_array_indentation": {
        "type": "boolean",
        "default": false,
        "description": "Preserve array indentation (Supported by JS Beautify)",
        "title": "Keep array indentation",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "keep_array_indentation",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "keep_function_indentation": {
        "type": "boolean",
        "default": false,
        "description": " (Supported by JS Beautify)",
        "title": "Keep function indentation",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "keep_function_indentation",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "space_before_conditional": {
        "type": "boolean",
        "default": true,
        "description": " (Supported by JS Beautify)",
        "title": "Space before conditional",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "space_before_conditional",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "eval_code": {
        "type": "boolean",
        "default": false,
        "description": " (Supported by JS Beautify)",
        "title": "Eval code",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "eval_code",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "unescape_strings": {
        "type": "boolean",
        "default": false,
        "description": "Decode printable characters encoded in xNN notation (Supported by JS Beautify)",
        "title": "Unescape strings",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "unescape_strings",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 0,
        "description": "Wrap lines at next opportunity after N characters (Supported by JS Beautify, Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "end_with_newline": {
        "type": "boolean",
        "default": false,
        "description": "End output with newline (Supported by JS Beautify)",
        "title": "End with newline",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "end_with_newline",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "end_with_comma": {
        "type": "boolean",
        "default": false,
        "description": "If a terminating comma should be inserted into arrays, object literals, and destructured objects. (Supported by JS Beautify, Pretty Diff)",
        "title": "End with comma",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "end_with_comma",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "end_of_line": {
        "type": "string",
        "default": "System Default",
        "enum": [
          "CRLF",
          "LF",
          "System Default"
        ],
        "description": "Override EOL from line-ending-selector (Supported by JS Beautify)",
        "title": "End of line",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "end_of_line",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable JSX Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Pretty Diff",
        "description": "Default Beautifier to be used for JSX",
        "enum": [
          "JS Beautify",
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify JSX files on save"
      }
    }
  },
  "latex": {
    "title": "LaTeX",
    "type": "object",
    "description": "Options for language LaTeX",
    "collapsed": true,
    "scope": [
      "source.tex"
    ],
    "beautifiers": [
      "Latex Beautify"
    ],
    "grammars": [
      "BibTeX",
      "LaTeX",
      "TeX"
    ],
    "extensions": [
      "bib",
      "tex",
      "sty",
      "cls",
      "dtx",
      "ins",
      "bbx",
      "cbx"
    ],
    "properties": {
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by Latex Beautify)",
        "title": "Indent char",
        "beautifiers": [
          "Latex Beautify"
        ],
        "key": "indent_char",
        "language": {
          "name": "LaTeX",
          "namespace": "latex"
        }
      },
      "indent_with_tabs": {
        "type": "boolean",
        "default": null,
        "description": "Indentation uses tabs, overrides `Indent Size` and `Indent Char` (Supported by Latex Beautify)",
        "title": "Indent with tabs",
        "beautifiers": [
          "Latex Beautify"
        ],
        "key": "indent_with_tabs",
        "language": {
          "name": "LaTeX",
          "namespace": "latex"
        }
      },
      "indent_preamble": {
        "type": "boolean",
        "default": false,
        "description": "Indent the preamble (Supported by Latex Beautify)",
        "title": "Indent preamble",
        "beautifiers": [
          "Latex Beautify"
        ],
        "key": "indent_preamble",
        "language": {
          "name": "LaTeX",
          "namespace": "latex"
        }
      },
      "always_look_for_split_braces": {
        "type": "boolean",
        "default": true,
        "description": "If `latexindent` should look for commands that split braces across lines (Supported by Latex Beautify)",
        "title": "Always look for split braces",
        "beautifiers": [
          "Latex Beautify"
        ],
        "key": "always_look_for_split_braces",
        "language": {
          "name": "LaTeX",
          "namespace": "latex"
        }
      },
      "always_look_for_split_brackets": {
        "type": "boolean",
        "default": false,
        "description": "If `latexindent` should look for commands that split brackets across lines (Supported by Latex Beautify)",
        "title": "Always look for split brackets",
        "beautifiers": [
          "Latex Beautify"
        ],
        "key": "always_look_for_split_brackets",
        "language": {
          "name": "LaTeX",
          "namespace": "latex"
        }
      },
      "remove_trailing_whitespace": {
        "type": "boolean",
        "default": false,
        "description": "Remove trailing whitespace (Supported by Latex Beautify)",
        "title": "Remove trailing whitespace",
        "beautifiers": [
          "Latex Beautify"
        ],
        "key": "remove_trailing_whitespace",
        "language": {
          "name": "LaTeX",
          "namespace": "latex"
        }
      },
      "align_columns_in_environments": {
        "type": "array",
        "default": [
          "tabular",
          "matrix",
          "bmatrix",
          "pmatrix"
        ],
        "description": "Aligns columns by the alignment tabs for environments specified (Supported by Latex Beautify)",
        "title": "Align columns in environments",
        "beautifiers": [
          "Latex Beautify"
        ],
        "key": "align_columns_in_environments",
        "language": {
          "name": "LaTeX",
          "namespace": "latex"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable LaTeX Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Latex Beautify",
        "description": "Default Beautifier to be used for LaTeX",
        "enum": [
          "Latex Beautify"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify LaTeX files on save"
      }
    }
  },
  "less": {
    "title": "LESS",
    "type": "object",
    "description": "Options for language LESS",
    "collapsed": true,
    "beautifiers": [
      "CSScomb",
      "Pretty Diff"
    ],
    "grammars": [
      "LESS"
    ],
    "extensions": [
      "less"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "minimum": 0,
        "description": "Indentation character (Supported by Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "newline_between_rules": {
        "type": "boolean",
        "default": true,
        "description": "Add a newline between CSS rules (Supported by Pretty Diff)",
        "title": "Newline between rules",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "newline_between_rules",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": false,
        "description": "Retain empty lines. Consecutive empty lines will be converted to a single empty line. (Supported by Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 0,
        "description": "Maximum amount of characters per line (0 = disable) (Supported by Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "indent_comments": {
        "type": "boolean",
        "default": true,
        "description": "Determines whether comments should be indented. (Supported by Pretty Diff)",
        "title": "Indent comments",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_comments",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "force_indentation": {
        "type": "boolean",
        "default": false,
        "description": "if indentation should be forcefully applied to markup even if it disruptively adds unintended whitespace to the documents rendered output (Supported by Pretty Diff)",
        "title": "Force indentation",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "force_indentation",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "convert_quotes": {
        "type": "string",
        "default": "none",
        "description": "Convert the quote characters delimiting strings from either double or single quotes to the other. (Supported by Pretty Diff)",
        "enum": [
          "none",
          "double",
          "single"
        ],
        "title": "Convert quotes",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "convert_quotes",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "align_assignments": {
        "type": "boolean",
        "default": false,
        "description": "If lists of assignments or properties should be vertically aligned for faster and easier reading. (Supported by Pretty Diff)",
        "title": "Align assignments",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "align_assignments",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "no_lead_zero": {
        "type": "boolean",
        "default": false,
        "description": "If in CSS values leading 0s immediately preceding a decimal should be removed or prevented. (Supported by Pretty Diff)",
        "title": "No lead zero",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "no_lead_zero",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "configPath": {
        "title": "comb custom config file",
        "type": "string",
        "default": "",
        "description": "Path to custom CSScomb config file, used in absence of a `.csscomb.json` or `.csscomb.cson` at the root of your project. (Supported by CSScomb)",
        "beautifiers": [
          "CSScomb"
        ],
        "key": "configPath",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "predefinedConfig": {
        "title": "comb predefined config",
        "type": "string",
        "default": "csscomb",
        "description": "Used if neither a project or custom config file exists. (Supported by CSScomb)",
        "enum": [
          "csscomb",
          "yandex",
          "zen"
        ],
        "beautifiers": [
          "CSScomb"
        ],
        "key": "predefinedConfig",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable LESS Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Pretty Diff",
        "description": "Default Beautifier to be used for LESS",
        "enum": [
          "CSScomb",
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify LESS files on save"
      }
    }
  },
  "lua": {
    "title": "Lua",
    "type": "object",
    "description": "Options for language Lua",
    "collapsed": true,
    "beautifiers": [
      "Lua beautifier"
    ],
    "grammars": [
      "Lua"
    ],
    "extensions": [
      "lua",
      "ttslua"
    ],
    "properties": {
      "end_of_line": {
        "type": "string",
        "default": "System Default",
        "enum": [
          "CRLF",
          "LF",
          "System Default"
        ],
        "description": "Override EOL from line-ending-selector (Supported by Lua beautifier)",
        "title": "End of line",
        "beautifiers": [
          "Lua beautifier"
        ],
        "key": "end_of_line",
        "language": {
          "name": "Lua",
          "namespace": "lua"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Lua Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Lua beautifier",
        "description": "Default Beautifier to be used for Lua",
        "enum": [
          "Lua beautifier"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Lua files on save"
      }
    }
  },
  "markdown": {
    "title": "Markdown",
    "type": "object",
    "description": "Options for language Markdown",
    "collapsed": true,
    "beautifiers": [
      "Remark",
      "Tidy Markdown"
    ],
    "grammars": [
      "GitHub Markdown"
    ],
    "extensions": [
      "markdown",
      "md"
    ],
    "properties": {
      "gfm": {
        "type": "boolean",
        "default": true,
        "description": "GitHub Flavoured Markdown (Supported by Remark)",
        "title": "Gfm",
        "beautifiers": [
          "Remark"
        ],
        "key": "gfm",
        "language": {
          "name": "Markdown",
          "namespace": "markdown"
        }
      },
      "yaml": {
        "type": "boolean",
        "default": true,
        "description": "Enables raw YAML front matter to be detected (thus ignoring markdown-like syntax). (Supported by Remark)",
        "title": "Yaml",
        "beautifiers": [
          "Remark"
        ],
        "key": "yaml",
        "language": {
          "name": "Markdown",
          "namespace": "markdown"
        }
      },
      "commonmark": {
        "type": "boolean",
        "default": false,
        "description": "Allows and disallows several constructs. (Supported by Remark)",
        "title": "Commonmark",
        "beautifiers": [
          "Remark"
        ],
        "key": "commonmark",
        "language": {
          "name": "Markdown",
          "namespace": "markdown"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Markdown Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Tidy Markdown",
        "description": "Default Beautifier to be used for Markdown",
        "enum": [
          "Remark",
          "Tidy Markdown"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Markdown files on save"
      }
    }
  },
  "marko": {
    "title": "Marko",
    "type": "object",
    "description": "Options for language Marko",
    "collapsed": true,
    "scope": [
      "text.marko"
    ],
    "beautifiers": [
      "Marko Beautifier"
    ],
    "grammars": [
      "Marko"
    ],
    "extensions": [
      "marko"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Marko Beautifier)",
        "title": "Indent size",
        "beautifiers": [
          "Marko Beautifier"
        ],
        "key": "indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by Marko Beautifier)",
        "title": "Indent char",
        "beautifiers": [
          "Marko Beautifier"
        ],
        "key": "indent_char",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "syntax": {
        "type": "string",
        "default": "html",
        "enum": [
          "html",
          "concise"
        ],
        "description": "[html|concise] (Supported by Marko Beautifier)",
        "title": "Syntax",
        "beautifiers": [
          "Marko Beautifier"
        ],
        "key": "syntax",
        "language": {
          "name": "Marko",
          "namespace": "marko"
        }
      },
      "indent_inner_html": {
        "type": "boolean",
        "default": false,
        "description": "Indent <head> and <body> sections. (Supported by Marko Beautifier)",
        "title": "Indent inner html",
        "beautifiers": [
          "Marko Beautifier"
        ],
        "key": "indent_inner_html",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "brace_style": {
        "type": "string",
        "default": "collapse",
        "enum": [
          "collapse",
          "expand",
          "end-expand",
          "none"
        ],
        "description": "[collapse|expand|end-expand|none] (Supported by Marko Beautifier)",
        "title": "Brace style",
        "beautifiers": [
          "Marko Beautifier"
        ],
        "key": "brace_style",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_scripts": {
        "type": "string",
        "default": "normal",
        "enum": [
          "keep",
          "separate",
          "normal"
        ],
        "description": "[keep|separate|normal] (Supported by Marko Beautifier)",
        "title": "Indent scripts",
        "beautifiers": [
          "Marko Beautifier"
        ],
        "key": "indent_scripts",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 250,
        "description": "Maximum characters per line (0 disables) (Supported by Marko Beautifier)",
        "title": "Wrap line length",
        "beautifiers": [
          "Marko Beautifier"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_attributes": {
        "type": "string",
        "default": "auto",
        "enum": [
          "auto",
          "force",
          "force-aligned",
          "force-expand-multiline"
        ],
        "description": "Wrap attributes to new lines [auto|force|force-aligned|force-expand-multiline] (Supported by Marko Beautifier)",
        "title": "Wrap attributes",
        "beautifiers": [
          "Marko Beautifier"
        ],
        "key": "wrap_attributes",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_attributes_indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indent wrapped attributes to after N characters (Supported by Marko Beautifier)",
        "title": "Wrap attributes indent size",
        "beautifiers": [
          "Marko Beautifier"
        ],
        "key": "wrap_attributes_indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by Marko Beautifier)",
        "title": "Preserve newlines",
        "beautifiers": [
          "Marko Beautifier"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "max_preserve_newlines": {
        "type": "integer",
        "default": 10,
        "description": "Number of line-breaks to be preserved in one chunk (Supported by Marko Beautifier)",
        "title": "Max preserve newlines",
        "beautifiers": [
          "Marko Beautifier"
        ],
        "key": "max_preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "unformatted": {
        "type": "array",
        "default": [
          "a",
          "abbr",
          "area",
          "audio",
          "b",
          "bdi",
          "bdo",
          "br",
          "button",
          "canvas",
          "cite",
          "code",
          "data",
          "datalist",
          "del",
          "dfn",
          "em",
          "embed",
          "i",
          "iframe",
          "img",
          "input",
          "ins",
          "kbd",
          "keygen",
          "label",
          "map",
          "mark",
          "math",
          "meter",
          "noscript",
          "object",
          "output",
          "progress",
          "q",
          "ruby",
          "s",
          "samp",
          "select",
          "small",
          "span",
          "strong",
          "sub",
          "sup",
          "svg",
          "template",
          "textarea",
          "time",
          "u",
          "var",
          "video",
          "wbr",
          "text",
          "acronym",
          "address",
          "big",
          "dt",
          "ins",
          "small",
          "strike",
          "tt",
          "pre",
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6"
        ],
        "items": {
          "type": "string"
        },
        "description": "List of tags (defaults to inline) that should not be reformatted (Supported by Marko Beautifier)",
        "title": "Unformatted",
        "beautifiers": [
          "Marko Beautifier"
        ],
        "key": "unformatted",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "end_with_newline": {
        "type": "boolean",
        "default": false,
        "description": "End output with newline (Supported by Marko Beautifier)",
        "title": "End with newline",
        "beautifiers": [
          "Marko Beautifier"
        ],
        "key": "end_with_newline",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "extra_liners": {
        "type": "array",
        "default": [
          "head",
          "body",
          "/html"
        ],
        "items": {
          "type": "string"
        },
        "description": "List of tags (defaults to [head,body,/html] that should have an extra newline before them. (Supported by Marko Beautifier)",
        "title": "Extra liners",
        "beautifiers": [
          "Marko Beautifier"
        ],
        "key": "extra_liners",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Marko Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Marko Beautifier",
        "description": "Default Beautifier to be used for Marko",
        "enum": [
          "Marko Beautifier"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Marko files on save"
      }
    }
  },
  "mustache": {
    "title": "Mustache",
    "type": "object",
    "description": "Options for language Mustache",
    "collapsed": true,
    "beautifiers": [
      "JS Beautify",
      "Pretty Diff"
    ],
    "grammars": [
      "HTML (Mustache)"
    ],
    "extensions": [
      "mustache"
    ],
    "properties": {
      "indent_inner_html": {
        "type": "boolean",
        "default": false,
        "description": "Indent <head> and <body> sections. (Supported by JS Beautify)",
        "title": "Indent inner html",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "indent_inner_html",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "brace_style": {
        "type": "string",
        "default": "collapse",
        "enum": [
          "collapse",
          "expand",
          "end-expand",
          "none"
        ],
        "description": "[collapse|expand|end-expand|none] (Supported by JS Beautify)",
        "title": "Brace style",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "brace_style",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_scripts": {
        "type": "string",
        "default": "normal",
        "enum": [
          "keep",
          "separate",
          "normal"
        ],
        "description": "[keep|separate|normal] (Supported by JS Beautify)",
        "title": "Indent scripts",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "indent_scripts",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 250,
        "description": "Maximum characters per line (0 disables) (Supported by JS Beautify, Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_attributes": {
        "type": "string",
        "default": "auto",
        "enum": [
          "auto",
          "force",
          "force-aligned",
          "force-expand-multiline"
        ],
        "description": "Wrap attributes to new lines [auto|force|force-aligned|force-expand-multiline] (Supported by JS Beautify)",
        "title": "Wrap attributes",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "wrap_attributes",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_attributes_indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indent wrapped attributes to after N characters (Supported by JS Beautify)",
        "title": "Wrap attributes indent size",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "wrap_attributes_indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by JS Beautify, Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "max_preserve_newlines": {
        "type": "integer",
        "default": 10,
        "description": "Number of line-breaks to be preserved in one chunk (Supported by JS Beautify)",
        "title": "Max preserve newlines",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "max_preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "unformatted": {
        "type": "array",
        "default": [
          "a",
          "abbr",
          "area",
          "audio",
          "b",
          "bdi",
          "bdo",
          "br",
          "button",
          "canvas",
          "cite",
          "code",
          "data",
          "datalist",
          "del",
          "dfn",
          "em",
          "embed",
          "i",
          "iframe",
          "img",
          "input",
          "ins",
          "kbd",
          "keygen",
          "label",
          "map",
          "mark",
          "math",
          "meter",
          "noscript",
          "object",
          "output",
          "progress",
          "q",
          "ruby",
          "s",
          "samp",
          "select",
          "small",
          "span",
          "strong",
          "sub",
          "sup",
          "svg",
          "template",
          "textarea",
          "time",
          "u",
          "var",
          "video",
          "wbr",
          "text",
          "acronym",
          "address",
          "big",
          "dt",
          "strike",
          "tt",
          "pre",
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6"
        ],
        "items": {
          "type": "string"
        },
        "description": "List of tags (defaults to inline) that should not be reformatted (Supported by JS Beautify)",
        "title": "Unformatted",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "unformatted",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "end_with_newline": {
        "type": "boolean",
        "default": false,
        "description": "End output with newline (Supported by JS Beautify)",
        "title": "End with newline",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "end_with_newline",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "extra_liners": {
        "type": "array",
        "default": [
          "head",
          "body",
          "/html"
        ],
        "items": {
          "type": "string"
        },
        "description": "List of tags (defaults to [head,body,/html] that should have an extra newline before them. (Supported by JS Beautify)",
        "title": "Extra liners",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "extra_liners",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Mustache Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "JS Beautify",
        "description": "Default Beautifier to be used for Mustache",
        "enum": [
          "JS Beautify",
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Mustache files on save"
      }
    }
  },
  "nginx": {
    "title": "Nginx",
    "type": "object",
    "description": "Options for language Nginx",
    "collapsed": true,
    "scope": [
      "source.conf"
    ],
    "beautifiers": [
      "Nginx Beautify"
    ],
    "grammars": [
      "nginx"
    ],
    "extensions": [
      "conf"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Nginx Beautify)",
        "title": "Indent size",
        "beautifiers": [
          "Nginx Beautify"
        ],
        "key": "indent_size",
        "language": {
          "name": "Nginx",
          "namespace": "nginx"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by Nginx Beautify)",
        "title": "Indent char",
        "beautifiers": [
          "Nginx Beautify"
        ],
        "key": "indent_char",
        "language": {
          "name": "Nginx",
          "namespace": "nginx"
        }
      },
      "indent_with_tabs": {
        "type": "boolean",
        "default": null,
        "description": "Indentation uses tabs, overrides `Indent Size` and `Indent Char` (Supported by Nginx Beautify)",
        "title": "Indent with tabs",
        "beautifiers": [
          "Nginx Beautify"
        ],
        "key": "indent_with_tabs",
        "language": {
          "name": "Nginx",
          "namespace": "nginx"
        }
      },
      "dontJoinCurlyBracet": {
        "title": "Don't join curly brackets",
        "type": "boolean",
        "default": true,
        "description": " (Supported by Nginx Beautify)",
        "beautifiers": [
          "Nginx Beautify"
        ],
        "key": "dontJoinCurlyBracet",
        "language": {
          "name": "Nginx",
          "namespace": "nginx"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Nginx Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Nginx Beautify",
        "description": "Default Beautifier to be used for Nginx",
        "enum": [
          "Nginx Beautify"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Nginx files on save"
      }
    }
  },
  "nunjucks": {
    "title": "Nunjucks",
    "type": "object",
    "description": "Options for language Nunjucks",
    "collapsed": true,
    "beautifiers": [
      "Pretty Diff"
    ],
    "grammars": [
      "Nunjucks",
      "Nunjucks Templates",
      "HTML (Nunjucks Templates)"
    ],
    "extensions": [
      "njk",
      "nunjucks"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 250,
        "description": "Maximum characters per line (0 disables) (Supported by Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Nunjucks Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Pretty Diff",
        "description": "Default Beautifier to be used for Nunjucks",
        "enum": [
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Nunjucks files on save"
      }
    }
  },
  "objectivec": {
    "title": "Objective-C",
    "type": "object",
    "description": "Options for language Objective-C",
    "collapsed": true,
    "beautifiers": [
      "Uncrustify",
      "clang-format"
    ],
    "grammars": [
      "Objective-C",
      "Objective-C++"
    ],
    "extensions": [
      "m",
      "mm",
      "h"
    ],
    "properties": {
      "configPath": {
        "title": "Config Path",
        "type": "string",
        "default": "",
        "description": "Path to uncrustify config file. i.e. uncrustify.cfg (Supported by Uncrustify)",
        "beautifiers": [
          "Uncrustify"
        ],
        "key": "configPath",
        "language": {
          "name": "Objective-C",
          "namespace": "objectivec"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Objective-C Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Uncrustify",
        "description": "Default Beautifier to be used for Objective-C",
        "enum": [
          "Uncrustify",
          "clang-format"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Objective-C files on save"
      }
    }
  },
  "ocaml": {
    "title": "OCaml",
    "type": "object",
    "description": "Options for language OCaml",
    "collapsed": true,
    "beautifiers": [
      "ocp-indent"
    ],
    "grammars": [
      "OCaml"
    ],
    "extensions": [
      "ml"
    ],
    "properties": {
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable OCaml Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "ocp-indent",
        "description": "Default Beautifier to be used for OCaml",
        "enum": [
          "ocp-indent"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify OCaml files on save"
      }
    }
  },
  "pawn": {
    "title": "Pawn",
    "type": "object",
    "description": "Options for language Pawn",
    "collapsed": true,
    "beautifiers": [
      "Uncrustify"
    ],
    "grammars": [
      "Pawn"
    ],
    "extensions": [],
    "properties": {
      "configPath": {
        "type": "string",
        "default": "",
        "description": "Path to uncrustify config file. i.e. uncrustify.cfg (Supported by Uncrustify)",
        "title": "Config Path",
        "beautifiers": [
          "Uncrustify"
        ],
        "key": "configPath",
        "language": {
          "name": "Pawn",
          "namespace": "pawn"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Pawn Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Uncrustify",
        "description": "Default Beautifier to be used for Pawn",
        "enum": [
          "Uncrustify"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Pawn files on save"
      }
    }
  },
  "perl": {
    "title": "Perl",
    "type": "object",
    "description": "Options for language Perl",
    "collapsed": true,
    "beautifiers": [
      "Perltidy"
    ],
    "grammars": [
      "Perl",
      "Perl 6"
    ],
    "extensions": [
      "pl",
      "PL",
      "pm",
      "pod",
      "t"
    ],
    "properties": {
      "perltidy_profile": {
        "type": "string",
        "default": "",
        "description": "Specify a configuration file which will override the default name of .perltidyrc (Supported by Perltidy)",
        "title": "Perltidy profile",
        "beautifiers": [
          "Perltidy"
        ],
        "key": "perltidy_profile",
        "language": {
          "name": "Perl",
          "namespace": "perl"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Perl Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Perltidy",
        "description": "Default Beautifier to be used for Perl",
        "enum": [
          "Perltidy"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Perl files on save"
      }
    }
  },
  "php": {
    "title": "PHP",
    "type": "object",
    "description": "Options for language PHP",
    "collapsed": true,
    "beautifiers": [
      "hh_format",
      "PHP-CS-Fixer",
      "PHPCBF"
    ],
    "grammars": [
      "PHP"
    ],
    "extensions": [
      "php",
      "module",
      "inc"
    ],
    "properties": {
      "cs_fixer_path": {
        "title": "PHP-CS-Fixer Path",
        "type": "string",
        "default": "",
        "description": "Absolute path to the `php-cs-fixer` CLI executable (Supported by PHP-CS-Fixer)",
        "beautifiers": [
          "PHP-CS-Fixer"
        ],
        "key": "cs_fixer_path",
        "language": {
          "name": "PHP",
          "namespace": "php"
        }
      },
      "cs_fixer_version": {
        "title": "PHP-CS-Fixer Version",
        "type": "integer",
        "default": 2,
        "enum": [
          1,
          2
        ],
        "beautifiers": [
          "PHP-CS-Fixer"
        ],
        "key": "cs_fixer_version",
        "language": {
          "name": "PHP",
          "namespace": "php"
        },
        "description": " (Supported by PHP-CS-Fixer)"
      },
      "cs_fixer_config_file": {
        "title": "PHP-CS-Fixer Config File",
        "type": "string",
        "default": "",
        "description": "Path to php-cs-fixer config file. Will use local `.php_cs` or `.php_cs.dist` if found in the working directory or project root. (Supported by PHP-CS-Fixer)",
        "beautifiers": [
          "PHP-CS-Fixer"
        ],
        "key": "cs_fixer_config_file",
        "language": {
          "name": "PHP",
          "namespace": "php"
        }
      },
      "fixers": {
        "type": "string",
        "default": "",
        "description": "Add fixer(s). i.e. linefeed,-short_tag,indentation (PHP-CS-Fixer 1 only) (Supported by PHP-CS-Fixer)",
        "title": "Fixers",
        "beautifiers": [
          "PHP-CS-Fixer"
        ],
        "key": "fixers",
        "language": {
          "name": "PHP",
          "namespace": "php"
        }
      },
      "level": {
        "type": "string",
        "default": "",
        "description": "By default, all PSR-2 fixers and some additional ones are run. (PHP-CS-Fixer 1 only) (Supported by PHP-CS-Fixer)",
        "title": "Level",
        "beautifiers": [
          "PHP-CS-Fixer"
        ],
        "key": "level",
        "language": {
          "name": "PHP",
          "namespace": "php"
        }
      },
      "rules": {
        "type": "string",
        "default": "",
        "description": "Add rule(s). i.e. line_ending,-full_opening_tag,@PSR2 (PHP-CS-Fixer 2 only) (Supported by PHP-CS-Fixer)",
        "title": "Rules",
        "beautifiers": [
          "PHP-CS-Fixer"
        ],
        "key": "rules",
        "language": {
          "name": "PHP",
          "namespace": "php"
        }
      },
      "allow_risky": {
        "title": "Allow risky rules",
        "type": "string",
        "default": "no",
        "enum": [
          "no",
          "yes"
        ],
        "description": "Allow risky rules to be applied (PHP-CS-Fixer 2 only) (Supported by PHP-CS-Fixer)",
        "beautifiers": [
          "PHP-CS-Fixer"
        ],
        "key": "allow_risky",
        "language": {
          "name": "PHP",
          "namespace": "php"
        }
      },
      "phpcbf_path": {
        "title": "PHPCBF Path",
        "type": "string",
        "default": "",
        "description": "Path to the `phpcbf` CLI executable (Supported by PHPCBF)",
        "beautifiers": [
          "PHPCBF"
        ],
        "key": "phpcbf_path",
        "language": {
          "name": "PHP",
          "namespace": "php"
        }
      },
      "phpcbf_version": {
        "title": "PHPCBF Version",
        "type": "integer",
        "default": 2,
        "enum": [
          1,
          2,
          3
        ],
        "beautifiers": [
          "PHPCBF"
        ],
        "key": "phpcbf_version",
        "language": {
          "name": "PHP",
          "namespace": "php"
        },
        "description": " (Supported by PHPCBF)"
      },
      "standard": {
        "title": "PHPCBF Standard",
        "type": "string",
        "default": "PEAR",
        "description": "Standard name Squiz, PSR2, PSR1, PHPCS, PEAR, Zend, MySource... or path to CS rules. Will use local `phpcs.xml`, `phpcs.xml.dist`, `phpcs.ruleset.xml` or `ruleset.xml` if found in the project root. (Supported by PHPCBF)",
        "beautifiers": [
          "PHPCBF"
        ],
        "key": "standard",
        "language": {
          "name": "PHP",
          "namespace": "php"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable PHP Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "PHP-CS-Fixer",
        "description": "Default Beautifier to be used for PHP",
        "enum": [
          "hh_format",
          "PHP-CS-Fixer",
          "PHPCBF"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify PHP files on save"
      }
    }
  },
  "puppet": {
    "title": "Puppet",
    "type": "object",
    "description": "Options for language Puppet",
    "collapsed": true,
    "beautifiers": [
      "puppet-lint"
    ],
    "grammars": [
      "Puppet"
    ],
    "extensions": [
      "pp"
    ],
    "properties": {
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Puppet Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "puppet-lint",
        "description": "Default Beautifier to be used for Puppet",
        "enum": [
          "puppet-lint"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Puppet files on save"
      }
    }
  },
  "python": {
    "title": "Python",
    "type": "object",
    "description": "Options for language Python",
    "collapsed": true,
    "scope": [
      "source.python"
    ],
    "beautifiers": [
      "autopep8",
      "pybeautifier",
      "yapf"
    ],
    "grammars": [
      "Python"
    ],
    "extensions": [
      "py"
    ],
    "properties": {
      "max_line_length": {
        "type": "integer",
        "default": 79,
        "description": "set maximum allowed line length (Supported by autopep8, pybeautifier)",
        "title": "Max line length",
        "beautifiers": [
          "autopep8",
          "pybeautifier"
        ],
        "key": "max_line_length",
        "language": {
          "name": "Python",
          "namespace": "python"
        }
      },
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by autopep8, pybeautifier)",
        "title": "Indent size",
        "beautifiers": [
          "autopep8",
          "pybeautifier"
        ],
        "key": "indent_size",
        "language": {
          "name": "Python",
          "namespace": "python"
        }
      },
      "ignore": {
        "type": "array",
        "default": [
          "E24"
        ],
        "items": {
          "type": "string"
        },
        "description": "do not fix these errors/warnings (Supported by autopep8, pybeautifier)",
        "title": "Ignore",
        "beautifiers": [
          "autopep8",
          "pybeautifier"
        ],
        "key": "ignore",
        "language": {
          "name": "Python",
          "namespace": "python"
        }
      },
      "formater": {
        "type": "string",
        "default": "autopep8",
        "enum": [
          "autopep8",
          "yapf"
        ],
        "description": "formatter used by pybeautifier (Supported by autopep8, pybeautifier)",
        "title": "Formater",
        "beautifiers": [
          "autopep8",
          "pybeautifier"
        ],
        "key": "formater",
        "language": {
          "name": "Python",
          "namespace": "python"
        }
      },
      "style_config": {
        "type": "string",
        "default": "pep8",
        "description": "formatting style used by yapf (Supported by autopep8, pybeautifier)",
        "title": "Style config",
        "beautifiers": [
          "autopep8",
          "pybeautifier"
        ],
        "key": "style_config",
        "language": {
          "name": "Python",
          "namespace": "python"
        }
      },
      "sort_imports": {
        "type": "boolean",
        "default": false,
        "description": "sort imports (requires isort installed) (Supported by autopep8, pybeautifier)",
        "title": "Sort imports",
        "beautifiers": [
          "autopep8",
          "pybeautifier"
        ],
        "key": "sort_imports",
        "language": {
          "name": "Python",
          "namespace": "python"
        }
      },
      "multi_line_output": {
        "type": "string",
        "default": "Hanging Grid Grouped",
        "enum": [
          "Grid",
          "Vertical",
          "Hanging Indent",
          "Vertical Hanging Indent",
          "Hanging Grid",
          "Hanging Grid Grouped",
          "NOQA"
        ],
        "description": "defines how from imports wrap (requires isort installed) (Supported by autopep8, pybeautifier)",
        "title": "Multi line output",
        "beautifiers": [
          "autopep8",
          "pybeautifier"
        ],
        "key": "multi_line_output",
        "language": {
          "name": "Python",
          "namespace": "python"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Python Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "autopep8",
        "description": "Default Beautifier to be used for Python",
        "enum": [
          "autopep8",
          "pybeautifier",
          "yapf"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Python files on save"
      }
    }
  },
  "r": {
    "title": "R",
    "type": "object",
    "description": "Options for language R",
    "collapsed": true,
    "scope": [
      "text.r"
    ],
    "beautifiers": [
      "formatR"
    ],
    "grammars": [
      "R"
    ],
    "extensions": [
      "r",
      "R"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "description": "Indentation size/length (Supported by formatR)",
        "title": "Indent size",
        "beautifiers": [
          "formatR"
        ],
        "key": "indent_size",
        "language": {
          "name": "R",
          "namespace": "r"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable R Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "formatR",
        "description": "Default Beautifier to be used for R",
        "enum": [
          "formatR"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify R files on save"
      }
    }
  },
  "riot": {
    "title": "Riot.js",
    "type": "object",
    "description": "Options for language Riot.js",
    "collapsed": true,
    "beautifiers": [
      "Pretty Diff"
    ],
    "grammars": [
      "Riot.js",
      "HTML (Riot Tag)"
    ],
    "extensions": [
      "tag"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 250,
        "description": "Maximum characters per line (0 disables) (Supported by Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Riot.js Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Pretty Diff",
        "description": "Default Beautifier to be used for Riot.js",
        "enum": [
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Riot.js files on save"
      }
    }
  },
  "ruby": {
    "title": "Ruby",
    "type": "object",
    "description": "Options for language Ruby",
    "collapsed": true,
    "scope": [
      "source.ruby"
    ],
    "beautifiers": [
      "Rubocop",
      "Ruby Beautify"
    ],
    "grammars": [
      "Ruby",
      "Ruby on Rails"
    ],
    "extensions": [
      "rb"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Rubocop, Ruby Beautify)",
        "title": "Indent size",
        "beautifiers": [
          "Rubocop",
          "Ruby Beautify"
        ],
        "key": "indent_size",
        "language": {
          "name": "Ruby",
          "namespace": "ruby"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by Ruby Beautify)",
        "enum": [
          " ",
          "\t"
        ],
        "title": "Indent char",
        "beautifiers": [
          "Ruby Beautify"
        ],
        "key": "indent_char",
        "language": {
          "name": "Ruby",
          "namespace": "ruby"
        }
      },
      "rubocop_path": {
        "title": "Rubocop Path",
        "type": "string",
        "default": "",
        "description": "Path to the `rubocop` CLI executable (Supported by Rubocop)",
        "beautifiers": [
          "Rubocop"
        ],
        "key": "rubocop_path",
        "language": {
          "name": "Ruby",
          "namespace": "ruby"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Ruby Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Rubocop",
        "description": "Default Beautifier to be used for Ruby",
        "enum": [
          "Rubocop",
          "Ruby Beautify"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Ruby files on save"
      }
    }
  },
  "rust": {
    "title": "Rust",
    "type": "object",
    "description": "Options for language Rust",
    "collapsed": true,
    "beautifiers": [
      "rustfmt"
    ],
    "grammars": [
      "Rust"
    ],
    "extensions": [
      "rs",
      "rlib"
    ],
    "properties": {
      "rustfmt_path": {
        "type": "string",
        "default": "",
        "description": "Path to rustfmt program (Supported by rustfmt)",
        "title": "Rustfmt path",
        "beautifiers": [
          "rustfmt"
        ],
        "key": "rustfmt_path",
        "language": {
          "name": "Rust",
          "namespace": "rust"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Rust Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "rustfmt",
        "description": "Default Beautifier to be used for Rust",
        "enum": [
          "rustfmt"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Rust files on save"
      }
    }
  },
  "sass": {
    "title": "Sass",
    "type": "object",
    "description": "Options for language Sass",
    "collapsed": true,
    "beautifiers": [
      "SassConvert"
    ],
    "grammars": [
      "Sass"
    ],
    "extensions": [
      "sass"
    ],
    "properties": {
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Sass Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "SassConvert",
        "description": "Default Beautifier to be used for Sass",
        "enum": [
          "SassConvert"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Sass files on save"
      }
    }
  },
  "scss": {
    "title": "SCSS",
    "type": "object",
    "description": "Options for language SCSS",
    "collapsed": true,
    "beautifiers": [
      "CSScomb",
      "Pretty Diff",
      "SassConvert"
    ],
    "grammars": [
      "SCSS"
    ],
    "extensions": [
      "scss"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "minimum": 0,
        "description": "Indentation character (Supported by Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "newline_between_rules": {
        "type": "boolean",
        "default": true,
        "description": "Add a newline between CSS rules (Supported by Pretty Diff)",
        "title": "Newline between rules",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "newline_between_rules",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": false,
        "description": "Retain empty lines. Consecutive empty lines will be converted to a single empty line. (Supported by Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 0,
        "description": "Maximum amount of characters per line (0 = disable) (Supported by Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "indent_comments": {
        "type": "boolean",
        "default": true,
        "description": "Determines whether comments should be indented. (Supported by Pretty Diff)",
        "title": "Indent comments",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_comments",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "force_indentation": {
        "type": "boolean",
        "default": false,
        "description": "if indentation should be forcefully applied to markup even if it disruptively adds unintended whitespace to the documents rendered output (Supported by Pretty Diff)",
        "title": "Force indentation",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "force_indentation",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "convert_quotes": {
        "type": "string",
        "default": "none",
        "description": "Convert the quote characters delimiting strings from either double or single quotes to the other. (Supported by Pretty Diff)",
        "enum": [
          "none",
          "double",
          "single"
        ],
        "title": "Convert quotes",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "convert_quotes",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "align_assignments": {
        "type": "boolean",
        "default": false,
        "description": "If lists of assignments or properties should be vertically aligned for faster and easier reading. (Supported by Pretty Diff)",
        "title": "Align assignments",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "align_assignments",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "no_lead_zero": {
        "type": "boolean",
        "default": false,
        "description": "If in CSS values leading 0s immediately preceding a decimal should be removed or prevented. (Supported by Pretty Diff)",
        "title": "No lead zero",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "no_lead_zero",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "configPath": {
        "title": "comb custom config file",
        "type": "string",
        "default": "",
        "description": "Path to custom CSScomb config file, used in absence of a `.csscomb.json` or `.csscomb.cson` at the root of your project. (Supported by CSScomb)",
        "beautifiers": [
          "CSScomb"
        ],
        "key": "configPath",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "predefinedConfig": {
        "title": "comb predefined config",
        "type": "string",
        "default": "csscomb",
        "description": "Used if neither a project or custom config file exists. (Supported by CSScomb)",
        "enum": [
          "csscomb",
          "yandex",
          "zen"
        ],
        "beautifiers": [
          "CSScomb"
        ],
        "key": "predefinedConfig",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable SCSS Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Pretty Diff",
        "description": "Default Beautifier to be used for SCSS",
        "enum": [
          "CSScomb",
          "Pretty Diff",
          "SassConvert"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify SCSS files on save"
      }
    }
  },
  "spacebars": {
    "title": "Spacebars",
    "type": "object",
    "description": "Options for language Spacebars",
    "collapsed": true,
    "beautifiers": [
      "Pretty Diff"
    ],
    "grammars": [
      "Spacebars"
    ],
    "extensions": [],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 250,
        "description": "Maximum characters per line (0 disables) (Supported by Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Spacebars Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Pretty Diff",
        "description": "Default Beautifier to be used for Spacebars",
        "enum": [
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Spacebars files on save"
      }
    }
  },
  "sql": {
    "title": "SQL",
    "type": "object",
    "description": "Options for language SQL",
    "collapsed": true,
    "scope": [
      "source.sql"
    ],
    "beautifiers": [
      "sqlformat"
    ],
    "grammars": [
      "SQL (Rails)",
      "SQL"
    ],
    "extensions": [
      "sql"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by sqlformat)",
        "title": "Indent size",
        "beautifiers": [
          "sqlformat"
        ],
        "key": "indent_size",
        "language": {
          "name": "SQL",
          "namespace": "sql"
        }
      },
      "keywords": {
        "type": "string",
        "default": "upper",
        "description": "Change case of keywords (Supported by sqlformat)",
        "enum": [
          "unchanged",
          "lower",
          "upper",
          "capitalize"
        ],
        "title": "Keywords",
        "beautifiers": [
          "sqlformat"
        ],
        "key": "keywords",
        "language": {
          "name": "SQL",
          "namespace": "sql"
        }
      },
      "identifiers": {
        "type": "string",
        "default": "unchanged",
        "description": "Change case of identifiers (Supported by sqlformat)",
        "enum": [
          "unchanged",
          "lower",
          "upper",
          "capitalize"
        ],
        "title": "Identifiers",
        "beautifiers": [
          "sqlformat"
        ],
        "key": "identifiers",
        "language": {
          "name": "SQL",
          "namespace": "sql"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable SQL Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "sqlformat",
        "description": "Default Beautifier to be used for SQL",
        "enum": [
          "sqlformat"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify SQL files on save"
      }
    }
  },
  "svg": {
    "title": "SVG",
    "type": "object",
    "description": "Options for language SVG",
    "collapsed": true,
    "beautifiers": [
      "Pretty Diff"
    ],
    "grammars": [
      "SVG"
    ],
    "extensions": [
      "svg"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 250,
        "description": "Maximum characters per line (0 disables) (Supported by Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable SVG Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Pretty Diff",
        "description": "Default Beautifier to be used for SVG",
        "enum": [
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify SVG files on save"
      }
    }
  },
  "swig": {
    "title": "Swig",
    "type": "object",
    "description": "Options for language Swig",
    "collapsed": true,
    "beautifiers": [
      "Pretty Diff"
    ],
    "grammars": [
      "HTML (Swig)",
      "SWIG"
    ],
    "extensions": [
      "swig"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 250,
        "description": "Maximum characters per line (0 disables) (Supported by Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Swig Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Pretty Diff",
        "description": "Default Beautifier to be used for Swig",
        "enum": [
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Swig files on save"
      }
    }
  },
  "tss": {
    "title": "TSS",
    "type": "object",
    "description": "Options for language TSS",
    "collapsed": true,
    "beautifiers": [
      "Pretty Diff"
    ],
    "grammars": [
      "TSS"
    ],
    "extensions": [
      "tss"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "minimum": 0,
        "description": "Indentation character (Supported by Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "newline_between_rules": {
        "type": "boolean",
        "default": true,
        "description": "Add a newline between CSS rules (Supported by Pretty Diff)",
        "title": "Newline between rules",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "newline_between_rules",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": false,
        "description": "Retain empty lines. Consecutive empty lines will be converted to a single empty line. (Supported by Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 0,
        "description": "Maximum amount of characters per line (0 = disable) (Supported by Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "indent_comments": {
        "type": "boolean",
        "default": true,
        "description": "Determines whether comments should be indented. (Supported by Pretty Diff)",
        "title": "Indent comments",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_comments",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "force_indentation": {
        "type": "boolean",
        "default": false,
        "description": "if indentation should be forcefully applied to markup even if it disruptively adds unintended whitespace to the documents rendered output (Supported by Pretty Diff)",
        "title": "Force indentation",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "force_indentation",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "convert_quotes": {
        "type": "string",
        "default": "none",
        "description": "Convert the quote characters delimiting strings from either double or single quotes to the other. (Supported by Pretty Diff)",
        "enum": [
          "none",
          "double",
          "single"
        ],
        "title": "Convert quotes",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "convert_quotes",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "align_assignments": {
        "type": "boolean",
        "default": false,
        "description": "If lists of assignments or properties should be vertically aligned for faster and easier reading. (Supported by Pretty Diff)",
        "title": "Align assignments",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "align_assignments",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "no_lead_zero": {
        "type": "boolean",
        "default": false,
        "description": "If in CSS values leading 0s immediately preceding a decimal should be removed or prevented. (Supported by Pretty Diff)",
        "title": "No lead zero",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "no_lead_zero",
        "language": {
          "name": "CSS",
          "namespace": "css"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable TSS Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Pretty Diff",
        "description": "Default Beautifier to be used for TSS",
        "enum": [
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify TSS files on save"
      }
    }
  },
  "twig": {
    "title": "Twig",
    "type": "object",
    "description": "Options for language Twig",
    "collapsed": true,
    "beautifiers": [
      "Pretty Diff"
    ],
    "grammars": [
      "HTML (Twig)"
    ],
    "extensions": [
      "twig"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_with_tabs": {
        "type": "boolean",
        "default": null,
        "description": "Indentation uses tabs, overrides `Indent Size` and `Indent Char` (Supported by Pretty Diff)",
        "title": "Indent with tabs",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_with_tabs",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "space_in_paren": {
        "type": "boolean",
        "default": false,
        "description": "Add padding spaces within paren, ie. f( a, b ) (Supported by Pretty Diff)",
        "title": "Space in paren",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "space_in_paren",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "space_after_anon_function": {
        "type": "boolean",
        "default": false,
        "description": "Add a space before an anonymous function's parens, ie. function () (Supported by Pretty Diff)",
        "title": "Space after anon function",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "space_after_anon_function",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "break_chained_methods": {
        "type": "boolean",
        "default": false,
        "description": "Break chained method calls across subsequent lines (Supported by Pretty Diff)",
        "title": "Break chained methods",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "break_chained_methods",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 250,
        "description": "Maximum characters per line (0 disables) (Supported by Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "end_with_comma": {
        "type": "boolean",
        "default": false,
        "description": "If a terminating comma should be inserted into arrays, object literals, and destructured objects. (Supported by Pretty Diff)",
        "title": "End with comma",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "end_with_comma",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Twig Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Pretty Diff",
        "description": "Default Beautifier to be used for Twig",
        "enum": [
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Twig files on save"
      }
    }
  },
  "typescript": {
    "title": "TypeScript",
    "type": "object",
    "description": "Options for language TypeScript",
    "collapsed": true,
    "beautifiers": [
      "TypeScript Formatter"
    ],
    "grammars": [
      "TypeScript"
    ],
    "extensions": [
      "ts"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by TypeScript Formatter)",
        "title": "Indent size",
        "beautifiers": [
          "TypeScript Formatter"
        ],
        "key": "indent_size",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by TypeScript Formatter)",
        "title": "Indent char",
        "beautifiers": [
          "TypeScript Formatter"
        ],
        "key": "indent_char",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "indent_level": {
        "type": "integer",
        "default": 0,
        "description": "Initial indentation level (Supported by TypeScript Formatter)",
        "title": "Indent level",
        "beautifiers": [
          "TypeScript Formatter"
        ],
        "key": "indent_level",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "indent_with_tabs": {
        "type": "boolean",
        "default": null,
        "description": "Indentation uses tabs, overrides `Indent Size` and `Indent Char` (Supported by TypeScript Formatter)",
        "title": "Indent with tabs",
        "beautifiers": [
          "TypeScript Formatter"
        ],
        "key": "indent_with_tabs",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by TypeScript Formatter)",
        "title": "Preserve newlines",
        "beautifiers": [
          "TypeScript Formatter"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "max_preserve_newlines": {
        "type": "integer",
        "default": 10,
        "description": "Number of line-breaks to be preserved in one chunk (Supported by TypeScript Formatter)",
        "title": "Max preserve newlines",
        "beautifiers": [
          "TypeScript Formatter"
        ],
        "key": "max_preserve_newlines",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "space_in_paren": {
        "type": "boolean",
        "default": false,
        "description": "Add padding spaces within paren, ie. f( a, b ) (Supported by TypeScript Formatter)",
        "title": "Space in paren",
        "beautifiers": [
          "TypeScript Formatter"
        ],
        "key": "space_in_paren",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "jslint_happy": {
        "type": "boolean",
        "default": false,
        "description": "Enable jslint-stricter mode (Supported by TypeScript Formatter)",
        "title": "Jslint happy",
        "beautifiers": [
          "TypeScript Formatter"
        ],
        "key": "jslint_happy",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "space_after_anon_function": {
        "type": "boolean",
        "default": false,
        "description": "Add a space before an anonymous function's parens, ie. function () (Supported by TypeScript Formatter)",
        "title": "Space after anon function",
        "beautifiers": [
          "TypeScript Formatter"
        ],
        "key": "space_after_anon_function",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "brace_style": {
        "type": "string",
        "default": "collapse",
        "enum": [
          "collapse",
          "collapse-preserve-inline",
          "expand",
          "end-expand",
          "none"
        ],
        "description": "[collapse|collapse-preserve-inline|expand|end-expand|none] (Supported by TypeScript Formatter)",
        "title": "Brace style",
        "beautifiers": [
          "TypeScript Formatter"
        ],
        "key": "brace_style",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "break_chained_methods": {
        "type": "boolean",
        "default": false,
        "description": "Break chained method calls across subsequent lines (Supported by TypeScript Formatter)",
        "title": "Break chained methods",
        "beautifiers": [
          "TypeScript Formatter"
        ],
        "key": "break_chained_methods",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "keep_array_indentation": {
        "type": "boolean",
        "default": false,
        "description": "Preserve array indentation (Supported by TypeScript Formatter)",
        "title": "Keep array indentation",
        "beautifiers": [
          "TypeScript Formatter"
        ],
        "key": "keep_array_indentation",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "keep_function_indentation": {
        "type": "boolean",
        "default": false,
        "description": " (Supported by TypeScript Formatter)",
        "title": "Keep function indentation",
        "beautifiers": [
          "TypeScript Formatter"
        ],
        "key": "keep_function_indentation",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "space_before_conditional": {
        "type": "boolean",
        "default": true,
        "description": " (Supported by TypeScript Formatter)",
        "title": "Space before conditional",
        "beautifiers": [
          "TypeScript Formatter"
        ],
        "key": "space_before_conditional",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "eval_code": {
        "type": "boolean",
        "default": false,
        "description": " (Supported by TypeScript Formatter)",
        "title": "Eval code",
        "beautifiers": [
          "TypeScript Formatter"
        ],
        "key": "eval_code",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "unescape_strings": {
        "type": "boolean",
        "default": false,
        "description": "Decode printable characters encoded in xNN notation (Supported by TypeScript Formatter)",
        "title": "Unescape strings",
        "beautifiers": [
          "TypeScript Formatter"
        ],
        "key": "unescape_strings",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 0,
        "description": "Wrap lines at next opportunity after N characters (Supported by TypeScript Formatter)",
        "title": "Wrap line length",
        "beautifiers": [
          "TypeScript Formatter"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "end_with_newline": {
        "type": "boolean",
        "default": false,
        "description": "End output with newline (Supported by TypeScript Formatter)",
        "title": "End with newline",
        "beautifiers": [
          "TypeScript Formatter"
        ],
        "key": "end_with_newline",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "end_with_comma": {
        "type": "boolean",
        "default": false,
        "description": "If a terminating comma should be inserted into arrays, object literals, and destructured objects. (Supported by TypeScript Formatter)",
        "title": "End with comma",
        "beautifiers": [
          "TypeScript Formatter"
        ],
        "key": "end_with_comma",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "end_of_line": {
        "type": "string",
        "default": "System Default",
        "enum": [
          "CRLF",
          "LF",
          "System Default"
        ],
        "description": "Override EOL from line-ending-selector (Supported by TypeScript Formatter)",
        "title": "End of line",
        "beautifiers": [
          "TypeScript Formatter"
        ],
        "key": "end_of_line",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable TypeScript Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "TypeScript Formatter",
        "description": "Default Beautifier to be used for TypeScript",
        "enum": [
          "TypeScript Formatter"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify TypeScript files on save"
      }
    }
  },
  "ux": {
    "title": "UX Markup",
    "type": "object",
    "description": "Options for language UX Markup",
    "collapsed": true,
    "beautifiers": [
      "Pretty Diff"
    ],
    "grammars": [
      "UX"
    ],
    "extensions": [
      "ux"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 250,
        "description": "Maximum characters per line (0 disables) (Supported by Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable UX Markup Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Pretty Diff",
        "description": "Default Beautifier to be used for UX Markup",
        "enum": [
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify UX Markup files on save"
      }
    }
  },
  "vala": {
    "title": "Vala",
    "type": "object",
    "description": "Options for language Vala",
    "collapsed": true,
    "beautifiers": [
      "Uncrustify"
    ],
    "grammars": [
      "Vala"
    ],
    "extensions": [
      "vala",
      "vapi"
    ],
    "properties": {
      "configPath": {
        "type": "string",
        "default": "",
        "description": "Path to uncrustify config file. i.e. uncrustify.cfg (Supported by Uncrustify)",
        "title": "Config Path",
        "beautifiers": [
          "Uncrustify"
        ],
        "key": "configPath",
        "language": {
          "name": "Vala",
          "namespace": "vala"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Vala Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Uncrustify",
        "description": "Default Beautifier to be used for Vala",
        "enum": [
          "Uncrustify"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Vala files on save"
      }
    }
  },
  "vue": {
    "title": "Vue",
    "type": "object",
    "description": "Options for language Vue",
    "collapsed": true,
    "beautifiers": [
      "Vue Beautifier"
    ],
    "grammars": [
      "Vue Component"
    ],
    "extensions": [
      "vue"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Vue Beautifier)",
        "title": "Indent size",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by Vue Beautifier)",
        "title": "Indent char",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "indent_char",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_level": {
        "type": "integer",
        "default": 0,
        "description": "Initial indentation level (Supported by Vue Beautifier)",
        "title": "Indent level",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "indent_level",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "indent_with_tabs": {
        "type": "boolean",
        "default": null,
        "description": "Indentation uses tabs, overrides `Indent Size` and `Indent Char` (Supported by Vue Beautifier)",
        "title": "Indent with tabs",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "indent_with_tabs",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by Vue Beautifier)",
        "title": "Preserve newlines",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "max_preserve_newlines": {
        "type": "integer",
        "default": 10,
        "description": "Number of line-breaks to be preserved in one chunk (Supported by Vue Beautifier)",
        "title": "Max preserve newlines",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "max_preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "space_in_paren": {
        "type": "boolean",
        "default": false,
        "description": "Add padding spaces within paren, ie. f( a, b ) (Supported by Vue Beautifier)",
        "title": "Space in paren",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "space_in_paren",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "jslint_happy": {
        "type": "boolean",
        "default": false,
        "description": "Enable jslint-stricter mode (Supported by Vue Beautifier)",
        "title": "Jslint happy",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "jslint_happy",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "space_after_anon_function": {
        "type": "boolean",
        "default": false,
        "description": "Add a space before an anonymous function's parens, ie. function () (Supported by Vue Beautifier)",
        "title": "Space after anon function",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "space_after_anon_function",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "brace_style": {
        "type": "string",
        "default": "collapse",
        "enum": [
          "collapse",
          "collapse-preserve-inline",
          "expand",
          "end-expand",
          "none"
        ],
        "description": "[collapse|expand|end-expand|none] (Supported by Vue Beautifier)",
        "title": "Brace style",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "brace_style",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "break_chained_methods": {
        "type": "boolean",
        "default": false,
        "description": "Break chained method calls across subsequent lines (Supported by Vue Beautifier)",
        "title": "Break chained methods",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "break_chained_methods",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "keep_array_indentation": {
        "type": "boolean",
        "default": false,
        "description": "Preserve array indentation (Supported by Vue Beautifier)",
        "title": "Keep array indentation",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "keep_array_indentation",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "keep_function_indentation": {
        "type": "boolean",
        "default": false,
        "description": " (Supported by Vue Beautifier)",
        "title": "Keep function indentation",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "keep_function_indentation",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "space_before_conditional": {
        "type": "boolean",
        "default": true,
        "description": " (Supported by Vue Beautifier)",
        "title": "Space before conditional",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "space_before_conditional",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "eval_code": {
        "type": "boolean",
        "default": false,
        "description": " (Supported by Vue Beautifier)",
        "title": "Eval code",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "eval_code",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "unescape_strings": {
        "type": "boolean",
        "default": false,
        "description": "Decode printable characters encoded in xNN notation (Supported by Vue Beautifier)",
        "title": "Unescape strings",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "unescape_strings",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 250,
        "description": "Maximum characters per line (0 disables) (Supported by Vue Beautifier)",
        "title": "Wrap line length",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "end_with_newline": {
        "type": "boolean",
        "default": false,
        "description": "End output with newline (Supported by Vue Beautifier)",
        "title": "End with newline",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "end_with_newline",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "end_with_comma": {
        "type": "boolean",
        "default": false,
        "description": "If a terminating comma should be inserted into arrays, object literals, and destructured objects. (Supported by Vue Beautifier)",
        "title": "End with comma",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "end_with_comma",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "end_of_line": {
        "type": "string",
        "default": "System Default",
        "enum": [
          "CRLF",
          "LF",
          "System Default"
        ],
        "description": "Override EOL from line-ending-selector (Supported by Vue Beautifier)",
        "title": "End of line",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "end_of_line",
        "language": {
          "name": "JavaScript",
          "namespace": "js"
        }
      },
      "indent_inner_html": {
        "type": "boolean",
        "default": false,
        "description": "Indent <head> and <body> sections. (Supported by Vue Beautifier)",
        "title": "Indent inner html",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "indent_inner_html",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_scripts": {
        "type": "string",
        "default": "normal",
        "enum": [
          "keep",
          "separate",
          "normal"
        ],
        "description": "[keep|separate|normal] (Supported by Vue Beautifier)",
        "title": "Indent scripts",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "indent_scripts",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_attributes": {
        "type": "string",
        "default": "auto",
        "enum": [
          "auto",
          "force",
          "force-aligned",
          "force-expand-multiline"
        ],
        "description": "Wrap attributes to new lines [auto|force|force-aligned|force-expand-multiline] (Supported by Vue Beautifier)",
        "title": "Wrap attributes",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "wrap_attributes",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_attributes_indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indent wrapped attributes to after N characters (Supported by Vue Beautifier)",
        "title": "Wrap attributes indent size",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "wrap_attributes_indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "unformatted": {
        "type": "array",
        "default": [
          "a",
          "abbr",
          "area",
          "audio",
          "b",
          "bdi",
          "bdo",
          "br",
          "button",
          "canvas",
          "cite",
          "code",
          "data",
          "datalist",
          "del",
          "dfn",
          "em",
          "embed",
          "i",
          "iframe",
          "img",
          "input",
          "ins",
          "kbd",
          "keygen",
          "label",
          "map",
          "mark",
          "math",
          "meter",
          "noscript",
          "object",
          "output",
          "progress",
          "q",
          "ruby",
          "s",
          "samp",
          "select",
          "small",
          "span",
          "strong",
          "sub",
          "sup",
          "svg",
          "template",
          "textarea",
          "time",
          "u",
          "var",
          "video",
          "wbr",
          "text",
          "acronym",
          "address",
          "big",
          "dt",
          "ins",
          "small",
          "strike",
          "tt",
          "pre",
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6"
        ],
        "items": {
          "type": "string"
        },
        "description": "List of tags (defaults to inline) that should not be reformatted (Supported by Vue Beautifier)",
        "title": "Unformatted",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "unformatted",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "extra_liners": {
        "type": "array",
        "default": [
          "head",
          "body",
          "/html"
        ],
        "items": {
          "type": "string"
        },
        "description": "List of tags (defaults to [head,body,/html] that should have an extra newline before them. (Supported by Vue Beautifier)",
        "title": "Extra liners",
        "beautifiers": [
          "Vue Beautifier"
        ],
        "key": "extra_liners",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Vue Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Vue Beautifier",
        "description": "Default Beautifier to be used for Vue",
        "enum": [
          "Vue Beautifier"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Vue files on save"
      }
    }
  },
  "visualforce": {
    "title": "Visualforce",
    "type": "object",
    "description": "Options for language Visualforce",
    "collapsed": true,
    "beautifiers": [
      "Pretty Diff"
    ],
    "grammars": [
      "Visualforce"
    ],
    "extensions": [
      "page"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 250,
        "description": "Maximum characters per line (0 disables) (Supported by Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Visualforce Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Pretty Diff",
        "description": "Default Beautifier to be used for Visualforce",
        "enum": [
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Visualforce files on save"
      }
    }
  },
  "xml": {
    "title": "XML",
    "type": "object",
    "description": "Options for language XML",
    "collapsed": true,
    "beautifiers": [
      "JS Beautify",
      "Pretty Diff"
    ],
    "grammars": [
      "SLD",
      "XML",
      "XHTML",
      "XSD",
      "XSL",
      "JSP",
      "GSP"
    ],
    "extensions": [
      "sld",
      "xml",
      "xhtml",
      "xsd",
      "xsl",
      "jsp",
      "gsp",
      "plist",
      "recipe",
      "config"
    ],
    "properties": {
      "indent_inner_html": {
        "type": "boolean",
        "default": false,
        "description": "Indent <head> and <body> sections. (Supported by JS Beautify)",
        "title": "Indent inner html",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "indent_inner_html",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by JS Beautify, Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "brace_style": {
        "type": "string",
        "default": "collapse",
        "enum": [
          "collapse",
          "expand",
          "end-expand",
          "none"
        ],
        "description": "[collapse|expand|end-expand|none] (Supported by JS Beautify)",
        "title": "Brace style",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "brace_style",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_scripts": {
        "type": "string",
        "default": "normal",
        "enum": [
          "keep",
          "separate",
          "normal"
        ],
        "description": "[keep|separate|normal] (Supported by JS Beautify)",
        "title": "Indent scripts",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "indent_scripts",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 250,
        "description": "Maximum characters per line (0 disables) (Supported by JS Beautify, Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_attributes": {
        "type": "string",
        "default": "auto",
        "enum": [
          "auto",
          "force",
          "force-aligned",
          "force-expand-multiline"
        ],
        "description": "Wrap attributes to new lines [auto|force|force-aligned|force-expand-multiline] (Supported by JS Beautify)",
        "title": "Wrap attributes",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "wrap_attributes",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_attributes_indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indent wrapped attributes to after N characters (Supported by JS Beautify)",
        "title": "Wrap attributes indent size",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "wrap_attributes_indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by JS Beautify, Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "JS Beautify",
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "max_preserve_newlines": {
        "type": "integer",
        "default": 10,
        "description": "Number of line-breaks to be preserved in one chunk (Supported by JS Beautify)",
        "title": "Max preserve newlines",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "max_preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "unformatted": {
        "type": "array",
        "default": [
          "a",
          "abbr",
          "area",
          "audio",
          "b",
          "bdi",
          "bdo",
          "br",
          "button",
          "canvas",
          "cite",
          "code",
          "data",
          "datalist",
          "del",
          "dfn",
          "em",
          "embed",
          "i",
          "iframe",
          "img",
          "input",
          "ins",
          "kbd",
          "keygen",
          "label",
          "map",
          "mark",
          "math",
          "meter",
          "noscript",
          "object",
          "output",
          "progress",
          "q",
          "ruby",
          "s",
          "samp",
          "select",
          "small",
          "span",
          "strong",
          "sub",
          "sup",
          "svg",
          "template",
          "textarea",
          "time",
          "u",
          "var",
          "video",
          "wbr",
          "text",
          "acronym",
          "address",
          "big",
          "dt",
          "ins",
          "small",
          "strike",
          "tt",
          "pre",
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6"
        ],
        "items": {
          "type": "string"
        },
        "description": "List of tags (defaults to inline) that should not be reformatted (Supported by JS Beautify)",
        "title": "Unformatted",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "unformatted",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "end_with_newline": {
        "type": "boolean",
        "default": false,
        "description": "End output with newline (Supported by JS Beautify)",
        "title": "End with newline",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "end_with_newline",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "extra_liners": {
        "type": "array",
        "default": [
          "head",
          "body",
          "/html"
        ],
        "items": {
          "type": "string"
        },
        "description": "List of tags (defaults to [head,body,/html] that should have an extra newline before them. (Supported by JS Beautify)",
        "title": "Extra liners",
        "beautifiers": [
          "JS Beautify"
        ],
        "key": "extra_liners",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable XML Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Pretty Diff",
        "description": "Default Beautifier to be used for XML",
        "enum": [
          "JS Beautify",
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify XML files on save"
      }
    }
  },
  "xtemplate": {
    "title": "XTemplate",
    "type": "object",
    "description": "Options for language XTemplate",
    "collapsed": true,
    "beautifiers": [
      "Pretty Diff"
    ],
    "grammars": [
      "XTemplate"
    ],
    "extensions": [
      "xtemplate"
    ],
    "properties": {
      "indent_size": {
        "type": "integer",
        "default": null,
        "minimum": 0,
        "description": "Indentation size/length (Supported by Pretty Diff)",
        "title": "Indent size",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_size",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "indent_char": {
        "type": "string",
        "default": null,
        "description": "Indentation character (Supported by Pretty Diff)",
        "title": "Indent char",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "indent_char",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "wrap_line_length": {
        "type": "integer",
        "default": 250,
        "description": "Maximum characters per line (0 disables) (Supported by Pretty Diff)",
        "title": "Wrap line length",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "wrap_line_length",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "preserve_newlines": {
        "type": "boolean",
        "default": true,
        "description": "Preserve line-breaks (Supported by Pretty Diff)",
        "title": "Preserve newlines",
        "beautifiers": [
          "Pretty Diff"
        ],
        "key": "preserve_newlines",
        "language": {
          "name": "HTML",
          "namespace": "html"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable XTemplate Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "Pretty Diff",
        "description": "Default Beautifier to be used for XTemplate",
        "enum": [
          "Pretty Diff"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify XTemplate files on save"
      }
    }
  },
  "yaml": {
    "title": "YAML",
    "type": "object",
    "description": "Options for language YAML",
    "collapsed": true,
    "scope": [
      "source.yaml"
    ],
    "beautifiers": [
      "align-yaml"
    ],
    "grammars": [
      "YAML"
    ],
    "extensions": [
      "yml",
      "yaml"
    ],
    "properties": {
      "padding": {
        "type": "integer",
        "default": 0,
        "minimum": 0,
        "description": "The amount of padding to add next to each line. (Supported by align-yaml)",
        "title": "Padding",
        "beautifiers": [
          "align-yaml"
        ],
        "key": "padding",
        "language": {
          "name": "YAML",
          "namespace": "yaml"
        }
      },
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable YAML Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "align-yaml",
        "description": "Default Beautifier to be used for YAML",
        "enum": [
          "align-yaml"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify YAML files on save"
      }
    }
  },
  "terraform": {
    "title": "Terraform",
    "type": "object",
    "description": "Options for language Terraform",
    "collapsed": true,
    "beautifiers": [
      "terraformfmt"
    ],
    "grammars": [
      "Terraform"
    ],
    "extensions": [
      "tf"
    ],
    "properties": {
      "disabled": {
        "title": "Disable Beautifying Language",
        "order": -3,
        "type": "boolean",
        "default": false,
        "description": "Disable Terraform Beautification"
      },
      "default_beautifier": {
        "title": "Default Beautifier",
        "order": -2,
        "type": "string",
        "default": "terraformfmt",
        "description": "Default Beautifier to be used for Terraform",
        "enum": [
          "terraformfmt"
        ]
      },
      "beautify_on_save": {
        "title": "Beautify On Save",
        "order": -1,
        "type": "boolean",
        "default": false,
        "description": "Automatically beautify Terraform files on save"
      }
    }
  },
  "executables": {
    "title": "Executables",
    "type": "object",
    "collapsed": true,
    "order": -1,
    "description": "Configure executables used by beautifiers.",
    "properties": {
      "uncrustify": {
        "key": "uncrustify",
        "title": "Uncrustify",
        "type": "object",
        "collapsed": true,
        "description": "Options for Uncrustify executable.",
        "properties": {
          "path": {
            "key": "path",
            "title": "Binary/Script Path",
            "type": "string",
            "default": "",
            "description": "Absolute path to the \"uncrustify\" executable's binary/script."
          }
        }
      },
      "autopep8": {
        "key": "autopep8",
        "title": "autopep8",
        "type": "object",
        "collapsed": true,
        "description": "Options for autopep8 executable.",
        "properties": {
          "path": {
            "key": "path",
            "title": "Binary/Script Path",
            "type": "string",
            "default": "",
            "description": "Absolute path to the \"autopep8\" executable's binary/script."
          }
        }
      },
      "isort": {
        "key": "isort",
        "title": "isort",
        "type": "object",
        "collapsed": true,
        "description": "Options for isort executable.",
        "properties": {
          "path": {
            "key": "path",
            "title": "Binary/Script Path",
            "type": "string",
            "default": "",
            "description": "Absolute path to the \"isort\" executable's binary/script."
          }
        }
      },
      "clang-format": {
        "key": "clang-format",
        "title": "ClangFormat",
        "type": "object",
        "collapsed": true,
        "description": "Options for ClangFormat executable.",
        "properties": {
          "path": {
            "key": "path",
            "title": "Binary/Script Path",
            "type": "string",
            "default": "",
            "description": "Absolute path to the \"clang-format\" executable's binary/script."
          }
        }
      },
      "crystal": {
        "key": "crystal",
        "title": "Crystal",
        "type": "object",
        "collapsed": true,
        "description": "Options for Crystal executable.",
        "properties": {
          "path": {
            "key": "path",
            "title": "Binary/Script Path",
            "type": "string",
            "default": "",
            "description": "Absolute path to the \"crystal\" executable's binary/script."
          }
        }
      },
      "dfmt": {
        "key": "dfmt",
        "title": "Dfmt",
        "type": "object",
        "collapsed": true,
        "description": "Options for Dfmt executable.",
        "properties": {
          "path": {
            "key": "path",
            "title": "Binary/Script Path",
            "type": "string",
            "default": "",
            "description": "Absolute path to the \"dfmt\" executable's binary/script."
          }
        }
      },
      "elm-format": {
        "key": "elm-format",
        "title": "elm-format",
        "type": "object",
        "collapsed": true,
        "description": "Options for elm-format executable.",
        "properties": {
          "path": {
            "key": "path",
            "title": "Binary/Script Path",
            "type": "string",
            "default": "",
            "description": "Absolute path to the \"elm-format\" executable's binary/script."
          }
        }
      },
      "goimports": {
        "key": "goimports",
        "title": "goimports",
        "type": "object",
        "collapsed": true,
        "description": "Options for goimports executable.",
        "properties": {
          "path": {
            "key": "path",
            "title": "Binary/Script Path",
            "type": "string",
            "default": "",
            "description": "Absolute path to the \"goimports\" executable's binary/script."
          }
        }
      },
      "emacs": {
        "key": "emacs",
        "title": "Emacs",
        "type": "object",
        "collapsed": true,
        "description": "Options for Emacs executable.",
        "properties": {
          "path": {
            "key": "path",
            "title": "Binary/Script Path",
            "type": "string",
            "default": "",
            "description": "Absolute path to the \"emacs\" executable's binary/script."
          }
        }
      },
      "php": {
        "key": "php",
        "title": "PHP",
        "type": "object",
        "collapsed": true,
        "description": "Options for PHP executable.",
        "properties": {
          "path": {
            "key": "path",
            "title": "Binary/Script Path",
            "type": "string",
            "default": "",
            "description": "Absolute path to the \"php\" executable's binary/script."
          }
        }
      },
      "php-cs-fixer": {
        "key": "php-cs-fixer",
        "title": "PHP-CS-Fixer",
        "type": "object",
        "collapsed": true,
        "description": "Options for PHP-CS-Fixer executable.",
        "properties": {
          "path": {
            "key": "path",
            "title": "Binary/Script Path",
            "type": "string",
            "default": "",
            "description": "Absolute path to the \"php-cs-fixer\" executable's binary/script."
          }
        }
      },
      "phpcbf": {
        "key": "phpcbf",
        "title": "PHPCBF",
        "type": "object",
        "collapsed": true,
        "description": "Options for PHPCBF executable.",
        "properties": {
          "path": {
            "key": "path",
            "title": "Binary/Script Path",
            "type": "string",
            "default": "",
            "description": "Absolute path to the \"phpcbf\" executable's binary/script."
          }
        }
      },
      "sass-convert": {
        "key": "sass-convert",
        "title": "SassConvert",
        "type": "object",
        "collapsed": true,
        "description": "Options for SassConvert executable.",
        "properties": {
          "path": {
            "key": "path",
            "title": "Binary/Script Path",
            "type": "string",
            "default": "",
            "description": "Absolute path to the \"sass-convert\" executable's binary/script."
          }
        }
      },
      "rscript": {
        "key": "rscript",
        "title": "Rscript",
        "type": "object",
        "collapsed": true,
        "description": "Options for Rscript executable.",
        "properties": {
          "path": {
            "key": "path",
            "title": "Binary/Script Path",
            "type": "string",
            "default": "",
            "description": "Absolute path to the \"rscript\" executable's binary/script."
          }
        }
      },
      "beautysh": {
        "key": "beautysh",
        "title": "beautysh",
        "type": "object",
        "collapsed": true,
        "description": "Options for beautysh executable.",
        "properties": {
          "path": {
            "key": "path",
            "title": "Binary/Script Path",
            "type": "string",
            "default": "",
            "description": "Absolute path to the \"beautysh\" executable's binary/script."
          }
        }
      },
      "terraform": {
        "key": "terraform",
        "title": "Terraform",
        "type": "object",
        "collapsed": true,
        "description": "Options for Terraform executable.",
        "properties": {
          "path": {
            "key": "path",
            "title": "Binary/Script Path",
            "type": "string",
            "default": "",
            "description": "Absolute path to the \"terraform\" executable's binary/script."
          }
        }
      }
    }
  }
}